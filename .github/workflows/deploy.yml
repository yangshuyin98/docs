# 定义工作流名称为“部署 VitePress 站点到 Pages”
name: Deploy VitePress site to Pages
# 触发工作流的事件
on:
 # 当代码推送到 master 分支时触发
  push:
    branches: [main]
    # 允许用户在 GitHub UI 手动触发工作流
  workflow_dispatch:
# 设置tokenn访问权限

# 设置工作流运行时的权限
permissions:
  contents: read   # 只读取仓库内容的权限
  pages: write         # 写入 GitHub Pages 的权限
  id-token: write     # 写入身份验证令牌的权限，用于工作流之间的通信

# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
# 设置并发控制，确保同一时间只有一个部署任务在运行
concurrency:
  group: pages     # 使用名为“pages”的并发组
  cancel-in-progress: false # 不取消正在进行的运行，允许生产部署完成
  
  
 # 构建工作
jobs: 
   # 定义构建任务
  build:
  # 在最新的 Ubuntu 系统上运行
    runs-on: ubuntu-latest
    steps:
    # 检出代码仓库
      - name: Checkout
        uses: actions/checkout@v3   # 使用 GitHub 官方的检出动作
        with:
          fetch-depth: 0 # 如果未启用 lastUpdated，则不需要
           # 获取完整的历史记录，用于生成正确的 lastUpdated 时间（如果需要）
           # 设置 pnpm 环境
      - name: Setup pnpm
        uses: pnpm/action-setup@v3 # 使用 pnpm 官方的动作来设置 pnpm
        with:
          version: 10.6.3 # 指定要安装的 pnpm 版本
          
          # 设置 Node.js 环境
      - name: Setup Node
        uses: actions/setup-node@v3  # 使用 GitHub 官方的 Node.js 设置动作
        with:
          node-version: "22"  # 使用 Node LTS 版本
          cache: pnpm       # 启用 pnpm 缓存以加速依赖安装
           # 配置 GitHub Pages 环境
      - name: Setup Pages
        uses: actions/configure-pages@v5  # 使用 GitHub 官方的动作来自动配置 Pages
      # 安装项目依赖
      - name: Install dependencies
        run: pnpm install        # 执行 pnpm install 命令安装依赖
        
          # 使用 VitePress 构建项目
      - name: Build with VitePress
        run: |
            pnpm run docs:build            # 执行构建命令，生成静态文件到指定目录
            touch .nojekyll           # 创建 .nojekyll 文件，避免 GitHub Pages 使用 Jekyll 处理站点
            # 上传构建后的文件作为工作流 artifact（中间产物）
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3   # 使用 GitHub 官方的动作上传文件
        with:
            path: docs/.vitepress/dist # 指定上传的路径，当前是根目录，如果是docs需要加docs/的前缀

# 定义部署任务
  deploy:
   # 设置部署环境
    environment:
      name: github-pages      # 环境名称为 github-pages
      url: ${{ steps.deployment.outputs.page_url }} # 部署完成后获取页面的 URL
       # 指定此任务依赖于 build 任务，必须在 build 完成后运行
    needs: build    # 在build后面完成
     # 在最新的 Ubuntu 系统上运行
    runs-on: ubuntu-latest  # 运行在最新版本的ubuntu系统上
    name: Deploy
    steps:
    # 部署到 GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment  # 指定id# 为这个步骤设置一个 ID，方便后续引用
        uses: actions/deploy-pages@v4 # 将之前的构建产物部署到github pages中
        # 使用 GitHub 官方的动作部署到 Pages