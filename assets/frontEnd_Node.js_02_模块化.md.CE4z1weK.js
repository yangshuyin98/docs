import{_ as s,c as n,o as p,ag as e}from"./chunks/framework.oP1PDRBo.js";const l="/docs/assets/image-20250325165449338.BNinBaid.png",t="/docs/assets/image-20250325165642827.BXcOpDEz.png",i="/docs/assets/image-20250326140025548.UV6mFtvu.png",o="/docs/assets/image-20250326164245059.YHMv7KNn.png",c="/docs/assets/image-20250326164252888.23qMv2tx.png",r="/docs/assets/image-20250326165723339.DkdyUXWx.png",d="/docs/assets/image-20250326171307994.Cc3U_JLW.png",h="/docs/assets/image-20250326171314109.Ci-ODdKQ.png",m="/docs/assets/image-20250326171334953.DbzFGAM6.png",u="/docs/assets/image-20250326171422404.GhxNK2LP.png",g="/docs/assets/image-20250326171500786.z3yS9WDS.png",b="/docs/assets/image-20250326172815538.QN1ivOYA.png",k="/docs/assets/image-20250326172753005.Bsgs5wRr.png",_="/docs/assets/image-20250326172717912.DCBgo0Vv.png",E=JSON.parse('{"title":"模块化","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/Node.js/02_模块化.md","filePath":"frontEnd/Node.js/02_模块化.md","lastUpdated":1743405079000}'),x={name:"frontEnd/Node.js/02_模块化.md"};function q(v,a,f,j,y,C){return p(),n("div",null,a[0]||(a[0]=[e('<h1 id="模块化" tabindex="-1">模块化 <a class="header-anchor" href="#模块化" aria-label="Permalink to &quot;模块化&quot;">​</a></h1><p>目标:</p><p>能够说出模块化的好处</p><p>能够知道 CommonJS 规定了哪些内容</p><p>能够说出 Node.js 中模块的三大分类各自是什么</p><p>能够使用 npm 管理包</p><p>能够了解什么是规范的包结构</p><p>能够了解模块的加载机制</p><h2 id="模块化的基本概念" tabindex="-1">模块化的基本概念 <a class="header-anchor" href="#模块化的基本概念" aria-label="Permalink to &quot;模块化的基本概念&quot;">​</a></h2><h3 id="_1-1-什么是模块化" tabindex="-1">1.1 什么是模块化 <a class="header-anchor" href="#_1-1-什么是模块化" aria-label="Permalink to &quot;1.1 什么是模块化&quot;">​</a></h3><p>模块化是指解决一个复杂问题时，自顶向下逐层把系统划分成若干模块的过程。对于整个系统来说，模块是可组合、分解和更换的单元。</p><h4 id="_1-现实生活中的模块化" tabindex="-1">1. 现实生活中的模块化 <a class="header-anchor" href="#_1-现实生活中的模块化" aria-label="Permalink to &quot;1. 现实生活中的模块化&quot;">​</a></h4><p><img src="'+l+'" alt="image-20250325165449338"></p><p><img src="'+t+`" alt="image-20250325165642827"></p><h4 id="_2-编程领域中的模块化" tabindex="-1">2. 编程领域中的模块化 <a class="header-anchor" href="#_2-编程领域中的模块化" aria-label="Permalink to &quot;2. 编程领域中的模块化&quot;">​</a></h4><p>编程领域中的模块化，就是遵守固定的规则，把一个大文件拆成独立并互相依赖的多个小模块。</p><p>把代码进行模块化拆分的好处：</p><p>①提高了代码的复用性</p><p>②提高了代码的可维护性</p><p>③可以实现按需加载</p><h3 id="_1-2-模块化规范" tabindex="-1">1.2 模块化规范 <a class="header-anchor" href="#_1-2-模块化规范" aria-label="Permalink to &quot;1.2 模块化规范&quot;">​</a></h3><p>模块化规范就是对代码进行模块化的拆分与组合时，需要遵守的那些规则。</p><p>例如：</p><p>使用什么样的语法格式来引用模块</p><p>在模块中使用什么样的语法格式向外暴露成员</p><p>模块化规范的好处：大家都遵守同样的模块化规范写代码，降低了沟通的成本，极大方便了各个模块之间的相互调用，利人利己。</p><h2 id="node-js-中模块的分类" tabindex="-1">Node.js 中模块的分类 <a class="header-anchor" href="#node-js-中模块的分类" aria-label="Permalink to &quot;Node.js 中模块的分类&quot;">​</a></h2><h3 id="_2-1-node-js-中模块的分类" tabindex="-1">2.1 Node.js 中模块的分类 <a class="header-anchor" href="#_2-1-node-js-中模块的分类" aria-label="Permalink to &quot;2.1 Node.js 中模块的分类&quot;">​</a></h3><p>Node.js 中根据模块来源的不同，将模块分为了 3 大类，分别是：</p><ol><li>内置模块（内置模块是由 Node.js 官方提供的，例如 fs、path、http 等）</li><li>自定义模块（用户创建的每个 .js 文件，都是自定义模块）</li><li>第三方模块（由第三方开发出来的模块，并非官方提供的内置模块，也不是用户创建的自定义模块，使用前需要先下载）</li></ol><h3 id="_2-2-加载模块" tabindex="-1">2.2 加载模块 <a class="header-anchor" href="#_2-2-加载模块" aria-label="Permalink to &quot;2.2 加载模块&quot;">​</a></h3><p>使用强大的 require() 方法，可以加载需要的内置模块、用户自定义模块、第三方模块进行使用。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const http = require(&#39;http&#39;)         //加载内置的fs模块路</span></span>
<span class="line"><span>const m1 = require(&#39;./custom.js&#39;)     //自定义模块需要加载路径</span></span>
<span class="line"><span>//加载第三方模块（关于第三方模块的下载和使用，会在后面的课程中进行讲解）</span></span>
<span class="line"><span>const moment =require(&#39;moment&#39;)</span></span></code></pre></div><p>注意：使用 require() 方法加载其它模块时，会执行被加载模块中的代码。</p><h3 id="_2-3-node-js-中的模块作用域" tabindex="-1">2.3 Node.js 中的模块作用域 <a class="header-anchor" href="#_2-3-node-js-中的模块作用域" aria-label="Permalink to &quot;2.3 Node.js 中的模块作用域&quot;">​</a></h3><h4 id="_1-什么是模块作用域" tabindex="-1">1. 什么是模块作用域 <a class="header-anchor" href="#_1-什么是模块作用域" aria-label="Permalink to &quot;1. 什么是模块作用域&quot;">​</a></h4><p>和函数作用域类似，在自定义模块中定义的变量、方法等成员，只能在当前模块内被访问，这种模块级别的访问限制，叫做模块作用域。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const custom = require(&#39;./08.模块作用域&#39;)</span></span>
<span class="line"><span>//在test.js模块中，无法访问custom模块中的私有成员</span></span>
<span class="line"><span>console.log(custom)     //    输出{}空对象</span></span></code></pre></div><h4 id="_2-模块作用域的好处" tabindex="-1">2. 模块作用域的好处 <a class="header-anchor" href="#_2-模块作用域的好处" aria-label="Permalink to &quot;2. 模块作用域的好处&quot;">​</a></h4><p>防止了全局变量污染的问题</p><h3 id="_2-4-向外共享模块作用域中的成员" tabindex="-1">2.4 向外共享模块作用域中的成员 <a class="header-anchor" href="#_2-4-向外共享模块作用域中的成员" aria-label="Permalink to &quot;2.4 向外共享模块作用域中的成员&quot;">​</a></h3><h4 id="_1-module-对象" tabindex="-1">1.module 对象 <a class="header-anchor" href="#_1-module-对象" aria-label="Permalink to &quot;1.module 对象&quot;">​</a></h4><p>在每个 .js 自定义模块中都有一个 module 对象，它里面存储了和当前模块有关的信息，打印如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>console.log(module)   //    输出{}空对象</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  id: &#39;.&#39;,</span></span>
<span class="line"><span>  path: &#39;D:\\\\路径...\\\\day2\\\\code&#39;,</span></span>
<span class="line"><span>  exports: {},</span></span>
<span class="line"><span>  filename: &#39;D:\\\\路径...\\\\day2\\\\code\\\\09.test.js&#39;,</span></span>
<span class="line"><span>  loaded: false,</span></span>
<span class="line"><span>  children: [</span></span>
<span class="line"><span>    {</span></span>
<span class="line"><span>      id: &#39;D:\\\\路径...\\\\day2\\\\code\\\\08.模块作用域.js&#39;,</span></span>
<span class="line"><span>      path: &#39;D:\\\\路径...\\\\day2\\\\code&#39;,</span></span>
<span class="line"><span>      exports: {},</span></span>
<span class="line"><span>      filename: &#39;D:\\\\路径...\\\\day2\\\\code\\\\08.模块作用域.js&#39;,</span></span>
<span class="line"><span>      loaded: true,</span></span>
<span class="line"><span>      children: [],</span></span>
<span class="line"><span>      paths: [Array],</span></span>
<span class="line"><span>      [Symbol(kIsMainSymbol)]: false,</span></span>
<span class="line"><span>      [Symbol(kIsCachedByESMLoader)]: false,</span></span>
<span class="line"><span>      [Symbol(kIsExecuting)]: false</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  paths: [</span></span>
<span class="line"><span>    &#39;D:\\\\路径...\\\\day2\\\\code\\\\node_modules&#39;,</span></span>
<span class="line"><span>    &#39;D:\\\\路径...\\\\day2\\\\node_modules&#39;,</span></span>
<span class="line"><span>    &#39;D:\\\\路径...\\\\node_modules&#39;,</span></span>
<span class="line"><span>    &#39;D:\\\\bili_download\\\\NEW\\\\node.js—资料\\\\node_modules&#39;,</span></span>
<span class="line"><span>    &#39;D:\\\\bili_download\\\\NEW\\\\node_modules&#39;,</span></span>
<span class="line"><span>    &#39;D:\\\\bili_download\\\\node_modules&#39;,</span></span>
<span class="line"><span>    &#39;D:\\\\node_modules&#39;</span></span>
<span class="line"><span>  ],</span></span>
<span class="line"><span>  [Symbol(kIsMainSymbol)]: true,</span></span>
<span class="line"><span>  [Symbol(kIsCachedByESMLoader)]: false,</span></span>
<span class="line"><span>  [Symbol(kIsExecuting)]: true</span></span>
<span class="line"><span>}</span></span></code></pre></div><h4 id="_2-module-exports-对象" tabindex="-1">2. module.exports 对象 <a class="header-anchor" href="#_2-module-exports-对象" aria-label="Permalink to &quot;2. module.exports 对象&quot;">​</a></h4><p>在自定义模块中，可以使用 module.exports 对象，将模块内的成员共享出去，供外界使用。</p><p>外界用 require() 方法导入自定义模块时，得到的就是 module.exports 所指向的对象。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 在一个自定义模块中，默认情况下， module.exports = {}</span></span>
<span class="line"><span>const age = 20</span></span>
<span class="line"><span>// 向 module.exports 对象上挂载 username 属性</span></span>
<span class="line"><span>module.exports.username = &#39;zs&#39;</span></span>
<span class="line"><span>// 向 module.exports 对象上挂载 sayHello 方法</span></span>
<span class="line"><span>module.exports.sayHello = function() {</span></span>
<span class="line"><span>  console.log(&#39;Hello!&#39;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>module.exports.age = age</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 让 module.exports 指向一个全新的对象</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  nickname: &#39;小黑&#39;,</span></span>
<span class="line"><span>  sayHi() {</span></span>
<span class="line"><span>    console.log(&#39;Hi!&#39;)</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 在外界使用 require 导入一个自定义模块的时候，得到的成员，</span></span>
<span class="line"><span>// 就是 那个模块中，通过 module.exports 指向的那个对象</span></span>
<span class="line"><span>const m = require(&#39;./11.自定义模块&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>console.log(m)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//结果{ nickname: &#39;小黑&#39;, sayHi: [Function: sayHi] }</span></span></code></pre></div><ol start="3"><li>共享成员时的注意点</li></ol><p>使用 require() 方法导入模块时，导入的结果，永远以 module.exports 指向的对象为准。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// console.log(exports)</span></span>
<span class="line"><span>// console.log(module.exports)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// console.log(exports === module.exports)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const username = &#39;zs&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports.username = username</span></span>
<span class="line"><span>exports.age = 20</span></span>
<span class="line"><span>exports.sayHello = function() {</span></span>
<span class="line"><span>  console.log(&#39;大家好！&#39;)</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 最终，向外共享的结果，永远都是 module.exports 所指向的对象</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>const m = require(&#39;./13.exports对象&#39;)</span></span>
<span class="line"><span>console.log(m)</span></span></code></pre></div><h4 id="_3-exports-对象" tabindex="-1">3.exports 对象 <a class="header-anchor" href="#_3-exports-对象" aria-label="Permalink to &quot;3.exports 对象&quot;">​</a></h4><p>由于 module.exports 单词写起来比较复杂，为了简化向外共享成员的代码，Node 提供了 exports 对象。默认情况下，exports 和 module.exports 指向同一个对象。最终共享的结果，还是以 module.exports 指向的对象为准。</p><h4 id="_4-exports-和-module-exports-的使用误区" tabindex="-1">4.exports 和 module.exports 的使用误区 <a class="header-anchor" href="#_4-exports-和-module-exports-的使用误区" aria-label="Permalink to &quot;4.exports 和 module.exports 的使用误区&quot;">​</a></h4><p>时刻谨记，require() 模块时，得到的永远是 module.exports 指向的对象：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>module.exports.name =&quot;zs&quot;</span></span>
<span class="line"><span>exports={</span></span>
<span class="line"><span>gender:&quot;男&quot;,</span></span>
<span class="line"><span>age:22</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>注意：为了防止混乱，建议大家不要在同一个模块中同时使用 exports 和 module.exports</p><h3 id="_2-5-node-js-中的模块化规范" tabindex="-1">2.5 Node.js 中的模块化规范 <a class="header-anchor" href="#_2-5-node-js-中的模块化规范" aria-label="Permalink to &quot;2.5 Node.js 中的模块化规范&quot;">​</a></h3><p>Node.js 遵循了 CommonJS 模块化规范，CommonJS 规定了模块的特性和各模块之间如何相互依赖。</p><p>CommonJS 规定：</p><p>①每个模块内部，module 变量代表当前模块。</p><p>②module 变量是一个对象，它的 exports 属性（即 module.exports）是对外的接口。</p><p>③加载某个模块，其实是加载该模块的 module.exports 属性。require() 方法用于加载模块。</p><h2 id="npm与包" tabindex="-1">npm与包 <a class="header-anchor" href="#npm与包" aria-label="Permalink to &quot;npm与包&quot;">​</a></h2><h2 id="_3-1-包" tabindex="-1">3.1 包 <a class="header-anchor" href="#_3-1-包" aria-label="Permalink to &quot;3.1 包&quot;">​</a></h2><h3 id="_1-什么是包" tabindex="-1">1. 什么是包 <a class="header-anchor" href="#_1-什么是包" aria-label="Permalink to &quot;1. 什么是包&quot;">​</a></h3><p>Node.js 中的第三方模块又叫做包。</p><p>就像电脑和计算机指的是相同的东西，第三方模块和包指的是同一个概念，只不过叫法不同。</p><h3 id="_2-包的来源" tabindex="-1">2. 包的来源 <a class="header-anchor" href="#_2-包的来源" aria-label="Permalink to &quot;2. 包的来源&quot;">​</a></h3><p>不同于 Node.js 中的内置模块与自定义模块，包是由第三方个人或团队开发出来的，免费供所有人使用。</p><p>注意：Node.js 中的包都是免费且开源的，不需要付费即可免费下载使用。</p><h3 id="_3-为什么需要包" tabindex="-1">3. 为什么需要包 <a class="header-anchor" href="#_3-为什么需要包" aria-label="Permalink to &quot;3. 为什么需要包&quot;">​</a></h3><p>由于 Node.js 的内置模块仅提供了一些底层的 API，导致在基于内置模块进行项目开发的时，效率很低。</p><p>包是基于内置模块封装出来的，提供了更高级、更方便的 API，极大的提高了开发效率。</p><p>包和内置模块之间的关系，类似于 jQuery 和 浏览器内置 API 之间的关系。</p><h3 id="_4-从哪里下载包" tabindex="-1">4. 从哪里下载包 <a class="header-anchor" href="#_4-从哪里下载包" aria-label="Permalink to &quot;4. 从哪里下载包&quot;">​</a></h3><p>国外有一家 IT 公司，叫做 npm, Inc. 这家公司旗下有一个非常著名的网站：<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">下载包</a> ，它是全球最大的包共享平台，你可以从这个网站上搜索到任何你需要的包，只要你有足够的耐心！</p><p>到目前位置，全球约 1100 多万的开发人员，通过这个包共享平台，开发并共享了超过 120 多万个包 供我们使用。</p><p>jquery、art-template、bootstrap</p><p>npm, Inc. 公司提供了一个地址为&lt; <a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">https://registry.npmjs.org/</a> &gt;的服务器，来对外共享所有的包，我们可以从这个服务器上下载自己所需要的包。</p><p>注意：</p><p>从<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a>网站上搜索自己所需要的包，检索</p><p>从<a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">https://registry.npmjs.org/</a>服务器上下载自己需要的包，下载</p><h3 id="_5-如何下载包" tabindex="-1">5. 如何下载包 <a class="header-anchor" href="#_5-如何下载包" aria-label="Permalink to &quot;5. 如何下载包&quot;">​</a></h3><p>npm, Inc. 公司提供了一个包管理工具，我们可以使用这个包管理工具，从 <a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">https://registry.npmjs.org/</a> 服务器把需要的包下载到本地使用。</p><p>这个包管理工具的名字叫做 Node Package Manager（简称 npm 包管理工具），这个包管理工具随着 Node.js 的安装包一起被安装到了用户的电脑上。</p><p>大家可以在终端中执行 npm -v 命令，来查看自己电脑上所安装的 npm 包管理工具的版本号：</p><h3 id="_3-2-npm-初体验" tabindex="-1">3.2 npm 初体验 <a class="header-anchor" href="#_3-2-npm-初体验" aria-label="Permalink to &quot;3.2 npm 初体验&quot;">​</a></h3><h4 id="_1-格式化时间的传统做法" tabindex="-1">1. 格式化时间的传统做法 <a class="header-anchor" href="#_1-格式化时间的传统做法" aria-label="Permalink to &quot;1. 格式化时间的传统做法&quot;">​</a></h4><p>①创建格式化时间的自定义模块</p><p>②定义格式化时间的方法</p><p>③创建补零函数</p><p>④从自定义模块中导出格式化时间的函数</p><p>⑤导入格式化时间的自定义模块</p><p>⑥调用格式化时间的函数</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//15.dateFormat</span></span>
<span class="line"><span>// 1. 定义格式化时间的方法</span></span>
<span class="line"><span>function dateFormat(dtStr) {</span></span>
<span class="line"><span>  const dt = new Date(dtStr)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const y = dt.getFullYear()</span></span>
<span class="line"><span>  const m = padZero(dt.getMonth() + 1)</span></span>
<span class="line"><span>  const d = padZero(dt.getDate())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const hh = padZero(dt.getHours())</span></span>
<span class="line"><span>  const mm = padZero(dt.getMinutes())</span></span>
<span class="line"><span>  const ss = padZero(dt.getSeconds())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return \`\${y}-\${m}-\${d} \${hh}:\${mm}:\${ss}\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 定义补零的函数</span></span>
<span class="line"><span>function padZero(n) {</span></span>
<span class="line"><span>  return n &gt; 9 ? n : &#39;0&#39; + n</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  dateFormat</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>导入自定义的格式化时间的模块</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 导入自定义的格式化时间的模块</span></span>
<span class="line"><span>const TIME = require(&#39;./15.dateFormat&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 调用方法，进行时间的格式化</span></span>
<span class="line"><span>const dt = new Date()</span></span>
<span class="line"><span>// console.log(dt)</span></span>
<span class="line"><span>const newDT = TIME.dateFormat(dt)</span></span>
<span class="line"><span>console.log(newDT)</span></span></code></pre></div><h4 id="_2-格式化时间的高级做法" tabindex="-1">2. 格式化时间的高级做法 <a class="header-anchor" href="#_2-格式化时间的高级做法" aria-label="Permalink to &quot;2. 格式化时间的高级做法&quot;">​</a></h4><p>①使用 npm 包管理工具，在项目中安装格式化时间的包 moment</p><p>②使用 require() 导入格式化时间的包</p><p>③参考 moment 的官方 API 文档对时间进行格式化</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 1. 导入需要的包</span></span>
<span class="line"><span>// 注意：导入的名称，就是装包时候的名称</span></span>
<span class="line"><span>const moment = require(&#39;moment&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const dt = moment().format(&#39;YYYY-MM-DD HH:mm:ss&#39;)</span></span>
<span class="line"><span>console.log(dt)</span></span></code></pre></div><h4 id="_3-在项目中安装包的命令" tabindex="-1">3.在项目中安装包的命令 <a class="header-anchor" href="#_3-在项目中安装包的命令" aria-label="Permalink to &quot;3.在项目中安装包的命令&quot;">​</a></h4><p>如果想在项目中安装指定名称的包，需要运行如下的命令：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm install 包的完整名称</span></span></code></pre></div><p>上述的装包命令，可以简写成如下格式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i 包的完整名称</span></span></code></pre></div><h4 id="_4-初次装包后多了哪些文件" tabindex="-1">4. 初次装包后多了哪些文件 <a class="header-anchor" href="#_4-初次装包后多了哪些文件" aria-label="Permalink to &quot;4. 初次装包后多了哪些文件&quot;">​</a></h4><p>初次装包完成后，在项目文件夹下多一个叫做 node_modules 的文件夹和 package-lock.json 的配置文件。</p><p>其中：</p><p>node_modules 文件夹用来存放所有已安装到项目中的包。require() 导入第三方包时，就是从这个目录中查找并加载包。</p><p>package-lock.json 配置文件用来记录 node_modules 目录下的每一个包的下载信息，例如包的名字、版本号、下载地址等。</p><p>注意：程序员不要手动修改 node_modules 或 package-lock.json 文件中的任何代码，npm 包管理工具会自动维护它们。</p><h4 id="_5-安装指定版本的包" tabindex="-1">5. 安装指定版本的包 <a class="header-anchor" href="#_5-安装指定版本的包" aria-label="Permalink to &quot;5. 安装指定版本的包&quot;">​</a></h4><p>默认情况下，使用 npm install 命令安装包的时候，会自动安装最新版本的包。如果需要安装指定版本的包，可以在包名之后，通过 @ 符号指定具体的版本，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i moment@2.22.2</span></span>
<span class="line"><span>npm i moment@2.24.0</span></span></code></pre></div><h4 id="_6-包的语义化版本规范" tabindex="-1">6. 包的语义化版本规范 <a class="header-anchor" href="#_6-包的语义化版本规范" aria-label="Permalink to &quot;6. 包的语义化版本规范&quot;">​</a></h4><p>包的版本号是以“点分十进制”形式进行定义的，总共有三位数字，例如 2.24.0</p><p>其中每一位数字所代表的的含义如下：</p><p>第1位数字：大版本</p><p>第2位数字：功能版本</p><p>第3位数字：Bug修复版本</p><p>版本号提升的规则：只要前面的版本号增长了，则后面的版本号归零。</p><h3 id="_3-3-包管理配置文件" tabindex="-1">3.3 包管理配置文件 <a class="header-anchor" href="#_3-3-包管理配置文件" aria-label="Permalink to &quot;3.3 包管理配置文件&quot;">​</a></h3><p>npm 规定，在项目根目录中，必须提供一个叫做 package.json 的包管理配置文件。用来记录与项目有关的一些配置信息。例如：</p><ul><li>项目的名称、版本号、描述等</li><li>项目中都用到了哪些包</li><li>哪些包只在开发期间会用到</li><li>那些包在开发和部署时都需要用到</li></ul><h4 id="_1-多人协作的问题" tabindex="-1">1. 多人协作的问题 <a class="header-anchor" href="#_1-多人协作的问题" aria-label="Permalink to &quot;1. 多人协作的问题&quot;">​</a></h4><p>整个项目的体积是 30.4M</p><p>第三方包的体积是 28.8M</p><p>项目源代码的体积 1.6M</p><p>遇到的问题：第三方包的体积过大，不方便团队成员之间共享项目源代码。</p><p><img src="`+i+`" alt="image-20250326140025548"></p><p>解决方案：共享时剔除node_modules</p><h4 id="_2-如何记录项目中安装了哪些包" tabindex="-1">2. 如何记录项目中安装了哪些包 <a class="header-anchor" href="#_2-如何记录项目中安装了哪些包" aria-label="Permalink to &quot;2. 如何记录项目中安装了哪些包&quot;">​</a></h4><p>在项目根目录中，创建一个叫做 package.json 的配置文件，即可用来记录项目中安装了哪些包。从而方便剔除 node_modules 目录之后，在团队成员之间共享项目的源代码。</p><p>注意：今后在项目开发中，一定要把 node_modules 文件夹，添加到 .gitignore 忽略文件中。</p><h4 id="_3-快速创建-package-json" tabindex="-1">3. 快速创建 package.json <a class="header-anchor" href="#_3-快速创建-package-json" aria-label="Permalink to &quot;3. 快速创建 package.json&quot;">​</a></h4><p>npm 包管理工具提供了一个快捷命令，可以在执行命令时所处的目录中，快速创建 package.json 这个包管理配置文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//作用：在执行命令所处的目录中，快速新建package。json 文件</span></span>
<span class="line"><span>nmp 	int -y</span></span></code></pre></div><p>注意：</p><p>①上述命令只能在英文的目录下成功运行！所以，项目文件夹的名称一定要使用英文命名，不要使用中文，不能出现空格。</p><p>②运行 npm install 命令安装包的时候，npm 包管理工具会自动把包的名称和版本号，记录到 package.json 中。</p><p>nmp i jquery art-template</p><h4 id="_4-dependencies-节点" tabindex="-1">4. dependencies 节点 <a class="header-anchor" href="#_4-dependencies-节点" aria-label="Permalink to &quot;4. dependencies 节点&quot;">​</a></h4><p>package.json 文件中，有一个 dependencies 节点，专门用来记录您使用 npm install 命令安装了哪些包。</p><ol start="5"><li>一次性安装所有的包</li></ol><p>当我们拿到一个剔除了 node_modules 的项目之后，需要先把所有的包下载到项目中，才能将项目运行起来。</p><p>否则会报类似于下面的错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//由于项目运行依赖于moment 这个包，如果没有提前安装好这个包，就会报如下的错误：</span></span>
<span class="line"><span>Error：Cannot find module &#39;moment&#39;</span></span></code></pre></div><p>可以运行 npm install 命令（或 npm i）一次性安装所有的依赖包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//执行npm install 命令时，npm包管理工具会先读取package.json中的dependencies节点，读取到记录的所有依赖包名称和版本之后，npm包管理工具会把这些包一次性下载到项目中</span></span>
<span class="line"><span>npm install</span></span></code></pre></div><h4 id="_6-卸载包" tabindex="-1">6. 卸载包 <a class="header-anchor" href="#_6-卸载包" aria-label="Permalink to &quot;6. 卸载包&quot;">​</a></h4><p>可以运行 npm uninstall 命令，来卸载指定的包：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm uninstall moment</span></span></code></pre></div><p>注意：npm uninstall 命令执行成功后，会把卸载的包，自动从 package.json 的 dependencies 中移除掉。</p><h4 id="_7-devdependencies-节点" tabindex="-1">7. devDependencies 节点 <a class="header-anchor" href="#_7-devdependencies-节点" aria-label="Permalink to &quot;7. devDependencies 节点&quot;">​</a></h4><p>如果某些包只在项目开发阶段会用到，在项目上线之后不会用到，则建议把这些包记录到 devDependencies 节点中。</p><p>与之对应的，如果某些包在开发和项目上线之后都需要用到，则建议把这些包记录到 dependencies 节点中。</p><p>您可以使用如下的命令，将包记录到 devDependencies 节点中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//安装指定的包，并记录到 devDependencies 节点中</span></span>
<span class="line"><span>npm i 包名 -D</span></span>
<span class="line"><span>//完整的写法</span></span>
<span class="line"><span>npm iinstall 包名 -save -dev</span></span>
<span class="line"><span>npm iinstall -save -dev webpack</span></span></code></pre></div><h3 id="_3-4-解决下包速度慢的问题" tabindex="-1">3.4 解决下包速度慢的问题 <a class="header-anchor" href="#_3-4-解决下包速度慢的问题" aria-label="Permalink to &quot;3.4 解决下包速度慢的问题&quot;">​</a></h3><h4 id="_1-为什么下包速度慢" tabindex="-1">1. 为什么下包速度慢 <a class="header-anchor" href="#_1-为什么下包速度慢" aria-label="Permalink to &quot;1. 为什么下包速度慢&quot;">​</a></h4><p>在使用 npm 下包的时候，默认从国外的 <a href="https://registry.npmjs.org/" target="_blank" rel="noreferrer">https://registry.npmjs.org/</a> 服务器进行下载，此时，网络数据的传输需要经过漫长的海底光缆，因此下包速度会很慢。</p><p>扩展阅读 - 海底光缆：</p><p><a href="https://baike.baidu.com/item/%E6%B5%B7%E5%BA%95%E5%85%89%E7%BC%86/4107830" target="_blank" rel="noreferrer">https://baike.baidu.com/item/%E6%B5%B7%E5%BA%95%E5%85%89%E7%BC%86/4107830</a></p><p><a href="https://baike.baidu.com/item/%E4%B8%AD%E7%BE%8E%E6%B5%B7%E5%BA%95%E5%85%89%E7%BC%86/10520363" target="_blank" rel="noreferrer">https://baike.baidu.com/item/%E4%B8%AD%E7%BE%8E%E6%B5%B7%E5%BA%95%E5%85%89%E7%BC%86/10520363</a></p><p><a href="https://baike.baidu.com/item/APG/23647721?fr=aladdin" target="_blank" rel="noreferrer">https://baike.baidu.com/item/APG/23647721?fr=aladdin</a></p><h4 id="_2-淘宝-npm-镜像服务器" tabindex="-1">2. 淘宝 NPM 镜像服务器 <a class="header-anchor" href="#_2-淘宝-npm-镜像服务器" aria-label="Permalink to &quot;2. 淘宝 NPM 镜像服务器&quot;">​</a></h4><p><img src="`+o+'" alt="image-20250326164245059"></p><p>淘宝在国内搭建了一个服务器，专门把国外官方服务器上的包同步到国内的服务器，然后在国内提供下包的服务。从而极大的提高了下包的速度。</p><p><img src="'+c+`" alt="image-20250326164252888"></p><p>扩展：</p><p>镜像（Mirroring）是一种文件存储形式，一个磁盘上的数据在另一个磁盘上存在一个完全相同的副本即为镜像。</p><h4 id="_3-切换-npm-的下包镜像源" tabindex="-1">3. 切换 npm 的下包镜像源 <a class="header-anchor" href="#_3-切换-npm-的下包镜像源" aria-label="Permalink to &quot;3. 切换 npm 的下包镜像源&quot;">​</a></h4><p>下包的镜像源，指的就是下包的服务器地址。</p><p>查看当前的下包镜像源</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm config get registry</span></span></code></pre></div><p>将下包的镜像源切换成淘宝镜像源</p><p>npm config set registry=http</p><p>检查镜像源是否下载成功</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm config get registry</span></span></code></pre></div><ol start="4"><li>nrm</li></ol><p>为了更方便的切换下包的镜像源，我们可以安装 nrm 这个小工具，利用 nrm 提供的终端命令，可以快速查看和切换下包的镜像源。</p><p>通过npm包管理，将nrm安装为全局可用的工具</p><p>npm i nrm -g</p><p>查看所有可用的镜像源</p><p>nrm ls</p><p>将下包的镜像源切换为 taobao 镜像</p><p>nrm use taobao</p><h4 id="_3-5-包的分类" tabindex="-1">3.5 包的分类 <a class="header-anchor" href="#_3-5-包的分类" aria-label="Permalink to &quot;3.5 包的分类&quot;">​</a></h4><p>使用 npm 包管理工具下载的包，共分为两大类，分别是：</p><p>l项目包</p><p>l全局包</p><ol><li>项目包</li></ol><p>那些被安装到项目的 node_modules 目录中的包，都是项目包。</p><p>项目包又分为两类，分别是：</p><p>l 开发依赖包（被记录到 devDependencies 节点中的包，只在开发期间会用到）</p><p>l 核心依赖包（被记录到 dependencies 节点中的包，在开发期间和项目上线之后都会用到）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//安装指定的包，并记录到 </span></span>
<span class="line"><span>npm i 包名 -D         #开发依赖包       devDependencies 节点中</span></span>
<span class="line"><span>npm i 包名            #核心依赖包          dependencies 节点中</span></span></code></pre></div><ol start="2"><li>全局包</li></ol><p>在执行 npm install 命令时，如果提供了 -g 参数，则会把包安装为全局包。</p><p>全局包会被安装到 C:\\Users\\用户目录\\AppData\\Roaming\\npm\\node_modules 目录下。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i 包名 -g                  #全局安装指定的包       </span></span>
<span class="line"><span>npm uninstall 包名 -g            #卸载全局指定的包</span></span></code></pre></div><p>注意：</p><p>①只有工具性质的包，才有全局安装的必要性。因为它们提供了好用的终端命令。</p><p>②判断某个包是否需要全局安装后才能使用，可以参考官方提供的使用说明即可。</p><h3 id="_3-5-包的分类-1" tabindex="-1">3.5 包的分类 <a class="header-anchor" href="#_3-5-包的分类-1" aria-label="Permalink to &quot;3.5 包的分类&quot;">​</a></h3><ol start="3"><li>i5ting_toc</li></ol><p>i5ting_toc 是一个可以把 md 文档转为 html 页面的小工具，使用步骤如下：</p><p><img src="`+r+'" alt="image-20250326165723339"></p><h3 id="_3-6-规范的包结构" tabindex="-1">3.6 规范的包结构 <a class="header-anchor" href="#_3-6-规范的包结构" aria-label="Permalink to &quot;3.6 规范的包结构&quot;">​</a></h3><p>在清楚了包的概念、以及如何下载和使用包之后，接下来，我们深入了解一下包的内部结构。</p><p>一个规范的包，它的组成结构，必须符合以下 3 点要求：</p><p>①包必须以单独的目录而存在</p><p>②包的顶级目录下要必须包含 package.json 这个包管理配置文件</p><p>③package.json 中必须包含 name，version，main 这三个属性，分别代表包的名字、版本号、包的入口。</p><p>注意：以上 3 点要求是一个规范的包结构必须遵守的格式，关于更多的约束，可以参考如下网址：</p><p><a href="https://yarnpkg.com/zh-Hans/docs/package-json" target="_blank" rel="noreferrer">https://yarnpkg.com/zh-Hans/docs/package-json</a></p><h3 id="_3-7-开发属于自己的包" tabindex="-1">3.7 开发属于自己的包 <a class="header-anchor" href="#_3-7-开发属于自己的包" aria-label="Permalink to &quot;3.7 开发属于自己的包&quot;">​</a></h3><h4 id="_1-需要实现的功能" tabindex="-1">1. 需要实现的功能 <a class="header-anchor" href="#_1-需要实现的功能" aria-label="Permalink to &quot;1. 需要实现的功能&quot;">​</a></h4><p>① 格式化日期</p><p>② 转义 HTML 中的特殊字符</p><p>③ 还原 HTML 中的特殊字符</p><p><img src="'+d+'" alt="image-20250326171307994"></p><p><img src="'+h+'" alt="image-20250326171314109"></p><p><img src="'+m+'" alt="image-20250326171334953"></p><h4 id="_2-初始化包的基本结构" tabindex="-1">2. 初始化包的基本结构 <a class="header-anchor" href="#_2-初始化包的基本结构" aria-label="Permalink to &quot;2. 初始化包的基本结构&quot;">​</a></h4><p>①新建 itheima-tools 文件夹，作为包的根目录</p><p>②在 itheima-tools 文件夹中，新建如下三个文件：</p><p>lpackage.json （包管理配置文件）</p><p>lindex.js （包的入口文件）</p><p>lREADME.md （包的说明文档）</p><h4 id="_3-初始化-package-json" tabindex="-1">3. 初始化 package.json <a class="header-anchor" href="#_3-初始化-package-json" aria-label="Permalink to &quot;3. 初始化 package.json&quot;">​</a></h4><p><img src="'+u+`" alt="image-20250326171422404"></p><p>&quot;name&quot;:为包名</p><p>keywords搜索关键字</p><p>关于更多 license 许可协议相关的内容，可参考 <a href="https://www.jianshu.com/p/86251523e898" target="_blank" rel="noreferrer">https://www.jianshu.com/p/86251523e898</a></p><h4 id="_4-在-index-js-中定义格式化时间的方法" tabindex="-1">4. 在 index.js 中定义格式化时间的方法 <a class="header-anchor" href="#_4-在-index-js-中定义格式化时间的方法" aria-label="Permalink to &quot;4. 在 index.js 中定义格式化时间的方法&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//dateFormat.js</span></span>
<span class="line"><span>// 定义格式化时间的函数</span></span>
<span class="line"><span>function dateFormat(dateStr) {</span></span>
<span class="line"><span>  const dt = new Date(dateStr)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const y = dt.getFullYear()</span></span>
<span class="line"><span>  const m = padZero(dt.getMonth() + 1)</span></span>
<span class="line"><span>  const d = padZero(dt.getDate())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  const hh = padZero(dt.getHours())</span></span>
<span class="line"><span>  const mm = padZero(dt.getMinutes())</span></span>
<span class="line"><span>  const ss = padZero(dt.getSeconds())</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  return \`\${y}-\${m}-\${d} \${hh}:\${mm}:\${ss}\`</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 定义一个补零的函数</span></span>
<span class="line"><span>function padZero(n) {</span></span>
<span class="line"><span>  return n &gt; 9 ? n : &#39;0&#39; + n</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>//向外暴露需要的成员</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  dateFormat</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>这是包的入口文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//index.js</span></span>
<span class="line"><span>const date = require(&#39;./src/dateFormat&#39;)</span></span>
<span class="line"><span>const escape = require(&#39;./src/htmlEscape&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 向外暴露需要的成员</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  ...date,</span></span>
<span class="line"><span>  ...escape</span></span>
<span class="line"><span>}</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>//test.js</span></span>
<span class="line"><span>const itheima = require (&#39;./itheima-tools/index&#39;)</span></span>
<span class="line"><span>// 格式化时间的功能</span></span>
<span class="line"><span>const dtStr = itheima.dateFormat(new Date())</span></span>
<span class="line"><span>console.log(dtStr)</span></span>
<span class="line"><span>console.log(&#39;-----------&#39;)</span></span></code></pre></div><ol start="5"><li><h4 id="在-index-js-中定义转义-html-的方法" tabindex="-1">在 index.js 中定义转义 HTML 的方法 <a class="header-anchor" href="#在-index-js-中定义转义-html-的方法" aria-label="Permalink to &quot;在 index.js 中定义转义 HTML 的方法&quot;">​</a></h4></li></ol><p><img src="`+g+`" alt="image-20250326171500786"></p><ol start="6"><li>在 index.js 中定义还原 HTML 的方法</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// htmlEscape.js</span></span>
<span class="line"><span>// 定义转义 HTML 字符的函数</span></span>
<span class="line"><span>function htmlEscape(htmlstr) {</span></span>
<span class="line"><span>  return htmlstr.replace(/&lt;|&gt;|&quot;|&amp;/g, match =&gt; {</span></span>
<span class="line"><span>    switch (match) {</span></span>
<span class="line"><span>      case &#39;&lt;&#39;:</span></span>
<span class="line"><span>        return &#39;&amp;lt;&#39;</span></span>
<span class="line"><span>      case &#39;&gt;&#39;:</span></span>
<span class="line"><span>        return &#39;&amp;gt;&#39;</span></span>
<span class="line"><span>      case &#39;&quot;&#39;:</span></span>
<span class="line"><span>        return &#39;&amp;quot;&#39;</span></span>
<span class="line"><span>      case &#39;&amp;&#39;:</span></span>
<span class="line"><span>        return &#39;&amp;amp;&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>//1. **正则表达式 \`/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g\`**:</span></span>
<span class="line"><span>   - \`&amp;lt;\`: 匹配 HTML 实体 \`&lt;\`</span></span>
<span class="line"><span>   - \`&amp;gt;\`: 匹配 HTML 实体 \`&gt;\`</span></span>
<span class="line"><span>   - \`&amp;quot;\`: 匹配 HTML 实体 \`&quot;\`</span></span>
<span class="line"><span>   - \`&amp;amp;\`: 匹配 HTML 实体 \`&amp;\`</span></span>
<span class="line"><span>   - \`|\`: 表示“或”，即匹配其中任意一个实体。</span></span>
<span class="line"><span>   - \`g\`: 全局标志，表示在整个字符串中查找所有匹配项，而不仅仅是第一个。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 定义还原 HTML 字符串的函数</span></span>
<span class="line"><span>function htmlUnEscape(str) {</span></span>
<span class="line"><span>  return str.replace(/&amp;lt;|&amp;gt;|&amp;quot;|&amp;amp;/g, match =&gt; {</span></span>
<span class="line"><span>    switch (match) {</span></span>
<span class="line"><span>      case &#39;&amp;lt;&#39;:</span></span>
<span class="line"><span>        return &#39;&lt;&#39;</span></span>
<span class="line"><span>      case &#39;&amp;gt;&#39;:</span></span>
<span class="line"><span>        return &#39;&gt;&#39;</span></span>
<span class="line"><span>      case &#39;&amp;quot;&#39;:</span></span>
<span class="line"><span>        return &#39;&quot;&#39;</span></span>
<span class="line"><span>      case &#39;&amp;amp;&#39;:</span></span>
<span class="line"><span>        return &#39;&amp;&#39;</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>  })</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  htmlEscape,</span></span>
<span class="line"><span>  htmlUnEscape</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="7"><li>将不同的功能进行模块化拆分</li></ol><p>①将格式化时间的功能，拆分到 src -&gt; dateFormat.js 中</p><p>②将处理 HTML 字符串的功能，拆分到 src -&gt; htmlEscape.js 中</p><p>③在 index.js 中，导入两个模块，得到需要向外共享的方法</p><p>④在 index.js 中，使用 module.exports 把对应的方法共享出去</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>// 这是包的入口文件</span></span>
<span class="line"><span></span></span>
<span class="line"><span>const date = require(&#39;./src/dateFormat&#39;)</span></span>
<span class="line"><span>const escape = require(&#39;./src/htmlEscape&#39;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 向外暴露需要的成员</span></span>
<span class="line"><span>module.exports = {</span></span>
<span class="line"><span>  ...date,</span></span>
<span class="line"><span>  ...escape</span></span>
<span class="line"><span>}</span></span></code></pre></div><ol start="8"><li>编写包的说明文档</li></ol><p>包根目录中的 README.md 文件，是包的使用说明文档。通过它，我们可以事先把包的使用说明，以 markdown 的格式写出来，方便用户参考。</p><p>README 文件中具体写什么内容，没有强制性的要求；只要能够清晰地把包的作用、用法、注意事项等描述清楚即可。</p><p>我们所创建的这个包的 README.md 文档中，会包含以下 6 项内容：</p><p>安装方式、导入方式、格式化时间、转义 HTML 中的特殊字符、还原 HTML 中的特殊字符、开源协议</p><h3 id="_3-8-发布包" tabindex="-1">3.8 发布包 <a class="header-anchor" href="#_3-8-发布包" aria-label="Permalink to &quot;3.8 发布包&quot;">​</a></h3><h4 id="_1-注册-npm-账号" tabindex="-1">1. 注册 npm 账号 <a class="header-anchor" href="#_1-注册-npm-账号" aria-label="Permalink to &quot;1. 注册 npm 账号&quot;">​</a></h4><p>①访问 <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">https://www.npmjs.com/</a> 网站，点击 sign up 按钮，进入注册用户界面</p><p>②填写账号相关的信息：Full Name、Public Email、Username、Password</p><p>③点击 Create an Account 按钮，注册账号</p><p>④登录邮箱，点击验证链接，进行账号的验证</p><h4 id="_2-登录-npm-账号" tabindex="-1">2. 登录 npm 账号 <a class="header-anchor" href="#_2-登录-npm-账号" aria-label="Permalink to &quot;2. 登录 npm 账号&quot;">​</a></h4><p>npm 账号注册完成后，可以在终端中执行 npm login 命令，依次输入用户名、密码、邮箱后，即可登录成功。</p><p><img src="`+b+'" alt="image-20250326172815538"></p><p>注意：在运行 npm login 命令之前，必须先把下包的服务器地址切换为 npm 的官方服务器。否则会导致发布包失败！</p><h4 id="_3-把包发布到-npm-上" tabindex="-1">3. 把包发布到 npm 上 <a class="header-anchor" href="#_3-把包发布到-npm-上" aria-label="Permalink to &quot;3. 把包发布到 npm 上&quot;">​</a></h4><p>将终端切换到包的根目录之后，运行 npm publish 命令，即可将包发布到 npm 上（注意：包名不能雷同）。</p><p><img src="'+k+'" alt="image-20250326172753005"></p><h4 id="_4-删除已发布的包" tabindex="-1">4. 删除已发布的包 <a class="header-anchor" href="#_4-删除已发布的包" aria-label="Permalink to &quot;4. 删除已发布的包&quot;">​</a></h4><p>运行 npm unpublish 包名 --force 命令，即可从 npm 删除已发布的包。</p><p><img src="'+_+'" alt="image-20250326172717912"></p><p>注意：</p><p>①npm unpublish 命令只能删除 72 小时以内发布的包</p><p>②npm unpublish 删除的包，在 24 小时内不允许重复发布</p><p>③发布包的时候要慎重，尽量不要往 npm 上发布没有意义的包！</p><h2 id="模块的加载机制" tabindex="-1">模块的加载机制 <a class="header-anchor" href="#模块的加载机制" aria-label="Permalink to &quot;模块的加载机制&quot;">​</a></h2><h3 id="_4-1-优先从缓存中加载" tabindex="-1">4.1 优先从缓存中加载 <a class="header-anchor" href="#_4-1-优先从缓存中加载" aria-label="Permalink to &quot;4.1 优先从缓存中加载&quot;">​</a></h3><p>模块在第一次加载后会被缓存。 这也意味着多次调用 require() 不会导致模块的代码被执行多次。</p><p>注意：不论是内置模块、用户自定义模块、还是第三方模块，它们都会优先从缓存中加载，从而提高模块的加载效率。</p><h3 id="_4-2-内置模块的加载机制" tabindex="-1">4.2 内置模块的加载机制 <a class="header-anchor" href="#_4-2-内置模块的加载机制" aria-label="Permalink to &quot;4.2 内置模块的加载机制&quot;">​</a></h3><p>内置模块是由 Node.js 官方提供的模块，内置模块的加载优先级最高。</p><p>例如，require(&#39;fs&#39;) 始终返回内置的 fs 模块，即使在 node_modules 目录下有名字相同的包也叫做 fs。</p><h3 id="_4-3-自定义模块的加载机制" tabindex="-1">4.3 自定义模块的加载机制 <a class="header-anchor" href="#_4-3-自定义模块的加载机制" aria-label="Permalink to &quot;4.3 自定义模块的加载机制&quot;">​</a></h3><p>使用 require() 加载自定义模块时，必须指定以 ./ 或 ../ 开头的路径标识符。在加载自定义模块时，如果没有指定 ./ 或 ../ 这样的路径标识符，则 node 会把它当作内置模块或第三方模块进行加载。</p><p>同时，在使用 require() 导入自定义模块时，如果省略了文件的扩展名，则 Node.js 会按顺序分别尝试加载以下的文件：</p><p>①按照确切的文件名进行加载</p><p>②补全 .js 扩展名进行加载</p><p>③补全 .json 扩展名进行加载</p><p>④补全 .node 扩展名进行加载</p><p>⑤加载失败，终端报错</p><h3 id="_4-4-第三方模块的加载机制" tabindex="-1">4.4 第三方模块的加载机制 <a class="header-anchor" href="#_4-4-第三方模块的加载机制" aria-label="Permalink to &quot;4.4 第三方模块的加载机制&quot;">​</a></h3><p>如果传递给 require() 的模块标识符不是一个内置模块，也没有以 ‘./’ 或 ‘../’ 开头，则 Node.js 会从当前模块的父目录开始，尝试从 /node_modules 文件夹中加载第三方模块。</p><p>如果没有找到对应的第三方模块，则移动到再上一层父目录中，进行加载，直到文件系统的根目录。</p><p>例如，假设在 &#39;C:\\Users\\itheima\\project\\foo.js&#39; 文件里调用了 require(&#39;tools&#39;)，则 Node.js 会按以下顺序查找：</p><p>① C:\\Users\\itheima\\project\\node_modules\\tools</p><p>② C:\\Users\\itheima\\node_modules\\tools</p><p>③ C:\\Users\\node_modules\\tools</p><p>④ C:\\node_modules\\tools</p><h3 id="_4-5-目录作为模块" tabindex="-1">4.5 目录作为模块 <a class="header-anchor" href="#_4-5-目录作为模块" aria-label="Permalink to &quot;4.5 目录作为模块&quot;">​</a></h3><p>当把目录作为模块标识符，传递给 require() 进行加载的时候，有三种加载方式：</p><p>①在被加载的目录下查找一个叫做 package.json 的文件，并寻找 main 属性，作为 require() 加载的入口</p><p>②如果目录里没有 package.json 文件，或者 main 入口不存在或无法解析，则 Node.js 将会试图加载目录下的 index.js 文件。</p><p>③如果以上两步都失败了，则 Node.js 会在终端打印错误消息，报告模块的缺失：Error: Cannot find module &#39;xxx&#39;</p>',309)]))}const D=s(x,[["render",q]]);export{E as __pageData,D as default};
