import{_ as e,c as t,o as i,ag as s,j as n}from"./chunks/framework.oP1PDRBo.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"CAE/23讲列表和字符串的操作方法.md","filePath":"CAE/23讲列表和字符串的操作方法.md","lastUpdated":1742892064000}'),p={name:"CAE/23讲列表和字符串的操作方法.md"};function l(r,a,d,o,c,h){return i(),t("div",null,a[0]||(a[0]=[s(`<h2 id="_23讲列表和字符串的操作方法" tabindex="-1">23讲列表和字符串的操作方法 <a class="header-anchor" href="#_23讲列表和字符串的操作方法" aria-label="Permalink to &quot;23讲列表和字符串的操作方法&quot;">​</a></h2><h2 id="讲解内容list" tabindex="-1">讲解内容list <a class="header-anchor" href="#讲解内容list" aria-label="Permalink to &quot;讲解内容list&quot;">​</a></h2><h3 id="list-命令" tabindex="-1">list 命令： <a class="header-anchor" href="#list-命令" aria-label="Permalink to &quot;list 命令：&quot;">​</a></h3><p>生成list</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set  lst  &quot;item1 item2 item3&quot;</span></span>
<span class="line"><span>set   lst  { { item1}  {item2}  {item3} }</span></span>
<span class="line"><span>set   lst  [list &quot;item1&quot;  &quot;item2&quot;  &quot;item3&quot;]</span></span></code></pre></div><h3 id="lindex-命令" tabindex="-1">lindex 命令： <a class="header-anchor" href="#lindex-命令" aria-label="Permalink to &quot;lindex 命令：&quot;">​</a></h3><p>列表索引lindex $list 0</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set    list1  { 1  2  3  4 }</span></span>
<span class="line"><span>lindex  $list1  0              //1</span></span>
<span class="line"><span>lindex  $list1  1              //2</span></span>
<span class="line"><span>lindex  $list1  2              //3</span></span>
<span class="line"><span>lindex  $list1  3              //4</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set simple_list { John  Joe  Mary  Susan }</span></span>
<span class="line"><span>lindex  $simple_list  0                   //John</span></span>
<span class="line"><span>lindex  $simple_list  4                   //空</span></span></code></pre></div><h3 id="llength-命令" tabindex="-1">llength 命令： <a class="header-anchor" href="#llength-命令" aria-label="Permalink to &quot;llength 命令：&quot;">​</a></h3><p>列表检查长度</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set names { Canada  India  USA  UK }</span></span>
<span class="line"><span>llength $names                          // 4</span></span></code></pre></div><h3 id="linsert-命令" tabindex="-1">linsert 命令： <a class="header-anchor" href="#linsert-命令" aria-label="Permalink to &quot;linsert 命令：&quot;">​</a></h3><p>在列表中插入一个元素使用linsert</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set names { Canada India USA UK }</span></span>
<span class="line"><span>linsert $names 1 China                   // Canada China India USA UK</span></span>
<span class="line"><span>set names  {Canada  India  USA  UK }</span></span>
<span class="line"><span>set newnames [linsert $names 2 China]    // Canada India China USA UK</span></span></code></pre></div><h3 id="iappend-命令" tabindex="-1">Iappend 命令： <a class="header-anchor" href="#iappend-命令" aria-label="Permalink to &quot;Iappend 命令：&quot;">​</a></h3><p>命令增加列表元素Iappend</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set names {Canada India USA UK}</span></span>
<span class="line"><span>set newnames [lappend names China]    // Canada India USA UK China</span></span></code></pre></div><h3 id="irepeat-命令" tabindex="-1">Irepeat 命令： <a class="header-anchor" href="#irepeat-命令" aria-label="Permalink to &quot;Irepeat 命令：&quot;">​</a></h3><p>命令重复列表元素</p>`,20),n("p",{Canada:"",India:"",USA:"",UK:""},"set names",-1),n("p",{Canada:"",India:"",USA:"",UK:""},"lrepeat 2 $names // 结果{Canada India USA UK}",-1),s(`<p>set a Canada</p><p>lrepeat 3 $a //结果Canada Canada Canada</p><h3 id="iassign-命令" tabindex="-1">Iassign 命令： <a class="header-anchor" href="#iassign-命令" aria-label="Permalink to &quot;Iassign 命令：&quot;">​</a></h3><p>命令赋值列表元素</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lassign { a b c } x y z     </span></span>
<span class="line"><span>puts x                                  //a</span></span>
<span class="line"><span>puts y                                  //b</span></span>
<span class="line"><span>puts z                                  //c</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>lassign { a b } x y z </span></span>
<span class="line"><span>puts x                                  //a</span></span>
<span class="line"><span>puts y                                  //b</span></span>
<span class="line"><span>puts z                                  //z为空值</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lassign { a b c } x y </span></span>
<span class="line"><span>puts x                                  //a</span></span>
<span class="line"><span>puts y                                  //b</span></span></code></pre></div><h3 id="irange命令" tabindex="-1">Irange命令： <a class="header-anchor" href="#irange命令" aria-label="Permalink to &quot;Irange命令：&quot;">​</a></h3><p>语法：Irange list first last</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lrange {1 7 8 2 4 5 6}  3  end        //结果2 4 5 6</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set list1 { 1 7 8 2 4 5 6 }</span></span>
<span class="line"><span>lrange list1 1  4                     //结果7 8 2 4</span></span></code></pre></div><h3 id="join命令" tabindex="-1">join命令： <a class="header-anchor" href="#join命令" aria-label="Permalink to &quot;join命令：&quot;">​</a></h3><p>语法：join list &quot;joinString&quot;</p><p>join命令是split命令的逆。这个命令把list的所有元素合并到一个字符串中，中间添加joinString合并。缺省的joinString是空格。例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>join {how {} are {} you}   {}            //howareyou</span></span>
<span class="line"><span>join    { how are you}      .            //how.are.you</span></span></code></pre></div><h3 id="split命令" tabindex="-1">Split命令： <a class="header-anchor" href="#split命令" aria-label="Permalink to &quot;Split命令：&quot;">​</a></h3><p>语法：split string &quot;splitChars&quot;</p><p>把字符串string按分隔符solitchars分成一个单词，返回由这些单词组成的串。如果splitchars是一个空字符{}，string被字符分开。如果splitchars没有给出，以空格为分隔符。例</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>split &quot;how.are.you&quot;  &quot;.&quot;           //how are you</span></span>
<span class="line"><span>split &quot;how are you&quot;                //how are you</span></span>
<span class="line"><span>split &quot;how are you&quot;  &quot;{}&quot;          //{how are you}</span></span></code></pre></div><h2 id="讲解内容string" tabindex="-1">讲解内容string <a class="header-anchor" href="#讲解内容string" aria-label="Permalink to &quot;讲解内容string&quot;">​</a></h2><p>String是一组用来存储和操作的，由字母/数字组成的字符，在Tcl中所有的数据项，包括数字，都应看作是字符串。</p><h3 id="first-查找" tabindex="-1">first 查找 <a class="header-anchor" href="#first-查找" aria-label="Permalink to &quot;first 查找&quot;">​</a></h3><p>String first string1 string2 ？startindex？在string2中从头查找与string1匹配的字符序列，<strong>如果找到，那么就返回匹配的第一个字母所在的位置（0-based）。如果没有找到，那么就返回-1.</strong></p><p>如果给出了startindex变量，那么将从startindex处开始查找。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string first ab defabc             //结果3</span></span>
<span class="line"><span>string first ab defaabc  3           //结果4    从位置4查起</span></span></code></pre></div><h3 id="index-命令" tabindex="-1">index 命令： <a class="header-anchor" href="#index-命令" aria-label="Permalink to &quot;index 命令：&quot;">​</a></h3><p><strong>String index string charindex</strong></p><p>返回string中第charIndex个字符 （0-based）。</p><p>CharIndex可以是下面的值：</p><p>整数n:字符串中第n个字符（0-based）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string index abcdef 2               //第三个数值结果c</span></span>
<span class="line"><span>string index abcdef end-2           //从后往前数第三个数值结果d</span></span></code></pre></div><p>End：最后一个字符</p><p>End-整数n：倒数第n个字符。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string index  &quot;abcd&quot;  end-1              //返回字符串&quot;c&quot;</span></span></code></pre></div><p>如果charIndex小于0，或者大于字符串string的长度，那么返回空。</p><h3 id="length-命令" tabindex="-1">length 命令： <a class="header-anchor" href="#length-命令" aria-label="Permalink to &quot;length 命令：&quot;">​</a></h3><p>string的长度</p><p>**string length string ** <strong>返回字符串string的长度</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string  length &quot;aasdfdfsd&quot;               //9</span></span>
<span class="line"><span>string  length &quot;string&quot;                  //6</span></span></code></pre></div><h3 id="match匹配" tabindex="-1">match匹配 <a class="header-anchor" href="#match匹配" aria-label="Permalink to &quot;match匹配&quot;">​</a></h3><p>String match？-nocase？ Pattern string</p><p>如果pattern匹配string，那么返回1，否则返回0.</p><p>如果有-nocase参数，那么就不区分大小写，在pattern中可以使用通配符：</p><p>*匹配string中的任意长的任意字符串，包括空字符串</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string  match * abcdef               --&gt;结果1  任意字符</span></span>
<span class="line"><span>string  match a*  abcdef            --&gt;结果1  a开头+任意字符</span></span>
<span class="line"><span>string  match a* bcdef               --&gt;结果0  a开头+任意字符</span></span>
<span class="line"><span>string  match a* bacdef             --&gt;结果0</span></span></code></pre></div><p>？匹配string中任意单个字符</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string match a?cdef abcdef          --&gt;结果1</span></span></code></pre></div><p>[chars]匹配字符集合cahrs中给出的任意字符，其中可以使用A-Z,a-z、0-9这种形式</p><p>\\x匹配单个字符x，使用”\\”是为了让x可以为字符*，-[,]</p><h3 id="range索引" tabindex="-1">range索引 <a class="header-anchor" href="#range索引" aria-label="Permalink to &quot;range索引&quot;">​</a></h3><p>string range string first last</p><p>返回字符串string中从第first个到第last个字符的子字符串。如果first&lt;0，那么first被看作0，如果last大于或等于字符串的长度，那么last被看作end，如果first比last大，那么返回空。</p><h3 id="repeat重复" tabindex="-1">repeat重复 <a class="header-anchor" href="#repeat重复" aria-label="Permalink to &quot;repeat重复&quot;">​</a></h3><p>string repeat string count</p><p>返回值为：重复了string字符串count次的字符串。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string  repeat &quot;abc&quot; 2                       //abcabc</span></span></code></pre></div><p>例如：</p><h3 id="replace-替换" tabindex="-1">replace 替换 <a class="header-anchor" href="#replace-替换" aria-label="Permalink to &quot;replace 替换&quot;">​</a></h3><p>String replace string first last ？newstring?</p><p>返回值为：从字符串string中删除了第first到第last个字符串（0-based）的字符串，如果给出了newstring变量，那么就用newstring替换从first到第last个字符。如果first&lt;0，那么last大于或等于字符串的 长度，那么last被看作end，如果first比last大或大于字符串string的长度，那么原封不动返回string。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set shd {sdafjsdkfaksd}</span></span>
<span class="line"><span>string replace $shd  2  6  898888                // sd898888kfaksd</span></span></code></pre></div><h3 id="剪切trim" tabindex="-1">剪切trim <a class="header-anchor" href="#剪切trim" aria-label="Permalink to &quot;剪切trim&quot;">​</a></h3><p><strong>string trim string</strong>**？ Chars？**</p><p>返回值为：从string字符串的首尾删除掉了字符串chars中的字符后的字符串，如果没有给出chars，那么将删除spaces、tabs、newlines、carriage returns这些字符。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string trim &quot;abc459e&quot; {a d e}                  --&gt;结果     bc459</span></span></code></pre></div>`,63)]))}const b=e(p,[["render",l]]);export{u as __pageData,b as default};
