import{_ as n,c as s,o as e,ag as t}from"./chunks/framework.oP1PDRBo.js";const m=JSON.parse('{"title":"书生·浦语 InternLM2","description":"","frontmatter":{"title":"书生·浦语 InternLM2","date":"2025-03-10T00:00:00.000Z","tags":["大模型","InternLM2"],"categories":["书生·浦语"],"sticky":3},"headers":[],"relativePath":"ollama/InternLM2书生浦语.md","filePath":"ollama/InternLM2书生浦语.md","lastUpdated":1744012294000}'),p={name:"ollama/InternLM2书生浦语.md"};function l(i,a,r,o,c,h){return e(),s("div",null,a[0]||(a[0]=[t(`<h1 id="书生·浦语-internlm2" tabindex="-1">书生·浦语 InternLM2 <a class="header-anchor" href="#书生·浦语-internlm2" aria-label="Permalink to &quot;书生·浦语 InternLM2&quot;">​</a></h1><h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>2024 年 1 月 17 日，新一代大语言模型书生·浦语 2.0（InternLM2）正式发布（<a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FInternLM%2FInternLM" target="_blank" rel="noreferrer">GitHub 仓库地址</a>）。相比于第一代 InternLM，InternLM2 在推理、对话体验等方面的能力全面提升，工具调用能力整体升级，并支持 20 万字超长上下文，实现长文对话 “大海捞针”。</p><p>InternLM2 包含 InternLM2-7B 和 InternLM2-20B 两种模型规格（20B 模型比 7B 模型功能更强大），每种规格又根据不同的应用场景，分为以下四种模型：<strong>InternLM2-Base</strong>、<strong>InternLM2</strong>、<strong>InternLM2-Chat-SFT</strong> 和 <strong>InternLM2-Chat</strong>。其中 <strong>InternLM2</strong> 是官方推荐使用的基础模型，<strong>InternLM2-Chat</strong> 是官方推荐使用的对话模型。下文主要介绍 <strong>InternLM2-Chat-7B</strong> 模型的部署和使用。</p><table tabindex="0"><thead><tr><th>模型</th><th>HuggingFace</th><th>ModelScope</th></tr></thead><tbody><tr><td><strong>InternLM2-Chat-7B</strong></td><td><a href="https://link.juejin.cn/?target=https%3A%2F%2Fhuggingface.co%2Finternlm%2Finternlm2-chat-7b" target="_blank" rel="noreferrer">仓库地址</a></td><td><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FShanghai_AI_Laboratory%2Finternlm2-chat-7b%2Fsummary" target="_blank" rel="noreferrer">仓库地址</a></td></tr><tr><td><strong>InternLM2-Chat-20B</strong></td><td><a href="https://link.juejin.cn/?target=https%3A%2F%2Fhuggingface.co%2Finternlm%2Finternlm2-chat-20b" target="_blank" rel="noreferrer">仓库地址</a></td><td><a href="https://link.juejin.cn/?target=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FShanghai_AI_Laboratory%2Finternlm2-chat-20b%2Fsummary" target="_blank" rel="noreferrer">仓库地址</a></td></tr></tbody></table><h1 id="环境准备" tabindex="-1">环境准备 <a class="header-anchor" href="#环境准备" aria-label="Permalink to &quot;环境准备&quot;">​</a></h1><p><a href="https://link.juejin.cn?target=https%3A%2F%2Ffeaturize.cn%2F" target="_blank" rel="noreferrer">Featurize</a> 算力平台提供了高效便捷的在线实验环境，在平台上租用合适的 GPU 实例，部署大模型，方便快捷，省时省力，而且价格亲民。</p><p>本人实际部署 <strong>InternLM2-Chat-7B</strong> 模型消耗显存 20 GB 左右（受实际参数配置影响，仅供参考），因此租用一张 RTX 3090 或者 RTX 4090 的 GPU 实例就能满足模型运行条件。</p><p>关于 Featurize 平台的使用，建议直接阅读 <a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.featurize.cn%2Fdocs%2Fmanual%2Finstance-rent" target="_blank" rel="noreferrer">官方文档</a>，上手操作非常简单，在此不在赘述。</p><h1 id="模型部署-使用" tabindex="-1">模型部署&amp;使用 <a class="header-anchor" href="#模型部署-使用" aria-label="Permalink to &quot;模型部署&amp;使用&quot;">​</a></h1><h2 id="页面交互方式" tabindex="-1">页面交互方式 <a class="header-anchor" href="#页面交互方式" aria-label="Permalink to &quot;页面交互方式&quot;">​</a></h2><p>两种部署方式只是页面展示效果不同，并无本质区别，选择其中一种方式部署即可。</p><h3 id="gradio" tabindex="-1">Gradio <a class="header-anchor" href="#gradio" aria-label="Permalink to &quot;Gradio&quot;">​</a></h3><p><a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FInternLM%2FLMDeploy" target="_blank" rel="noreferrer">LMDeploy</a> 工具中封装了 Gradio，我们使用该工具部署模型。</p><p>LMDeploy 所需的运行环境和模型部署代码已整理到下方的脚本文件中，执行脚本文件即可<strong>一键部署</strong>。</p><p>首先解释下启动命令中的几个参数含义，各参数取值可根据硬件条件自行调整。</p><ul><li><code>tp（tensor_parallel_size）</code>：表示使用几张 GPU 来运行一个模型。</li><li><code>max_batch_size</code>：批处理大小，该参数值越大，吞吐量越高，但会占用更多显存。</li><li><code>cache_max_entry_count</code>：设置 k/v 缓存大小，会占用显存。当值为 0~1 之间的小数时，表示 k/v block 使用的内存百分比（例如显存 60 G，该值设置为 0.5，则 k/v 使用的内存总量为 60 * 0.5 = 30G）。当值 &gt;1 时，表示 k/v block 数量。</li><li><code>./internlm2-chat-7b</code>：模型本地存储路径。</li></ul><p>具体操作步骤如下。</p><ol><li>通过 ssh 终端连接到服务器实例，新建 <code>deploy.sh</code> 脚本文件，文件内容如下。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd ~</span></span>
<span class="line"><span># 安装运行环境</span></span>
<span class="line"><span>echo &quot;Installing Python dependencies&quot;</span></span>
<span class="line"><span>pip install lmdeploy socksio gradio==3.50.2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装 Git ltf 扩展包</span></span>
<span class="line"><span>echo &quot;Installing git lfs extension&quot;</span></span>
<span class="line"><span>curl -s https://packagecloud.io/install/repositories/github/git-lfs/script.deb.sh | sudo bash</span></span>
<span class="line"><span>sudo apt-get install -y git-lfs</span></span>
<span class="line"><span>git lfs install</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 拉取模型库</span></span>
<span class="line"><span>echo &quot;Download repo&quot;</span></span>
<span class="line"><span>git clone https://huggingface.co/internlm/internlm2-chat-7b</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 启动模型</span></span>
<span class="line"><span>echo &quot;start model&quot;</span></span>
<span class="line"><span>python3 -m lmdeploy.serve.gradio.app --tp=1 --max_batch_size=64 --cache_max_entry_count=0.1 --server_name=0.0.0.0 --server_port=8888 ./internlm2-chat-7b</span></span></code></pre></div><ol start="2"><li>执行 <code>sh deploy.sh</code> 命令启动脚本。脚本执行大约需要 5 分钟时间（模型仓库中有几个大文件）。新开一个终端窗口，执行命令 <code>watch -n 1 nvidia-smi</code> 可以实时观察 GPU 资源的使用情况。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/37a3fbe8cb4e457b8d7fce952c7e1343~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=677&amp;h=350&amp;s=18048&amp;e=png&amp;b=000000" alt="internLM2-01.png"></p><p>3.模型部署完成，执行下面命令，开放 Featurize 端口。端口开放后 Featurize 会提供公网访问地址。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开放端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">featurize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> export</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8888</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看已开放的端口</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">featurize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> port</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span></code></pre></div><ol start="4"><li>访问公网地址，使用模型。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f594bc43ab0c4a78a5b4eeb14e42b47a~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=1460&amp;h=740&amp;s=24759&amp;e=png&amp;b=ffffff" alt="internLM2-02.png"></p><h3 id="streamlit" tabindex="-1">Streamlit <a class="header-anchor" href="#streamlit" aria-label="Permalink to &quot;Streamlit&quot;">​</a></h3><p>官方 <a href="https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FInternLM%2FInternLM" target="_blank" rel="noreferrer">GitHub 仓库</a> 中提供了使用 Streamlit 部署模型的代码。示例代码默认加载远程 Hugging Face 仓库中的模型，如果已经将模型下载到本地，可以修改源码从本地加载模型。</p><p>脚本文件如下，可直接执行，一键部署。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cd ~</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 安装环境</span></span>
<span class="line"><span>pip install streamlit==1.24.0</span></span>
<span class="line"><span>pip install transformers==4.37.0</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 克隆代码</span></span>
<span class="line"><span>git clone https://github.com/InternLM/InternLM.git</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 运行</span></span>
<span class="line"><span>streamlit run ./InternLM/chat/web_demo.py</span></span></code></pre></div><p>默认启动端口：8501，记得开放 Featurize 端口。交互页面如下所示。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c62dd44fb3684492a9bc0fe03921720f~tplv-k3u1fbpfcp-jj-mark:3024:0:0:0:q75.awebp#?w=2560&amp;h=1238&amp;s=37452&amp;e=png&amp;b=ffffff" alt="internLM2-03.png"></p><h2 id="代码方式" tabindex="-1">代码方式 <a class="header-anchor" href="#代码方式" aria-label="Permalink to &quot;代码方式&quot;">​</a></h2><p><strong>注意</strong>：代码中<code>./internlm2-chat-7b</code> 为模型本地存储路径，请根据实际情况自行调整。</p><h3 id="transformers" tabindex="-1">Transformers <a class="header-anchor" href="#transformers" aria-label="Permalink to &quot;Transformers&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import torch</span></span>
<span class="line"><span>from transformers import AutoTokenizer, AutoModelForCausalLM</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>
<span class="line"><span>    # 没有本地模型，替换为 internlm/internlm2-chat-7b</span></span>
<span class="line"><span>    tokenizer = AutoTokenizer.from_pretrained(&quot;./internlm2-chat-7b&quot;, trust_remote_code=True)</span></span>
<span class="line"><span>    model = AutoModelForCausalLM.from_pretrained(&quot;./internlm2-chat-7b&quot;, device_map=&quot;auto&quot;,</span></span>
<span class="line"><span>                                                 trust_remote_code=True, torch_dtype=torch.float16)</span></span>
<span class="line"><span>    model = model.eval()</span></span>
<span class="line"><span>    response, history = model.chat(tokenizer, &quot;你好 我是 Cleaner&quot;, history=[])</span></span>
<span class="line"><span>    print(response)</span></span></code></pre></div><h3 id="modelscope" tabindex="-1">ModelScope <a class="header-anchor" href="#modelscope" aria-label="Permalink to &quot;ModelScope&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>import torch</span></span>
<span class="line"><span>from modelscope import snapshot_download, AutoTokenizer, AutoModelForCausalLM</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>
<span class="line"><span>    # 没有本地模型，替换为 Shanghai_AI_Laboratory/internlm2-chat-7b</span></span>
<span class="line"><span>    model_dir = snapshot_download(&#39;./internlm2-chat-7b&#39;)</span></span>
<span class="line"><span>    tokenizer = AutoTokenizer.from_pretrained(model_dir, device_map=&quot;auto&quot;, trust_remote_code=True)</span></span>
<span class="line"><span>    model = AutoModelForCausalLM.from_pretrained(model_dir, device_map=&quot;auto&quot;, trust_remote_code=True,</span></span>
<span class="line"><span>                                                 torch_dtype=torch.float16)</span></span>
<span class="line"><span>    model = model.eval()</span></span>
<span class="line"><span>    response, history = model.chat(tokenizer, &quot;你好 我是 Cleaner&quot;, history=[])</span></span>
<span class="line"><span>    print(response)</span></span></code></pre></div><h3 id="lmdeploy" tabindex="-1">LMDeploy <a class="header-anchor" href="#lmdeploy" aria-label="Permalink to &quot;LMDeploy&quot;">​</a></h3><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Flmdeploy.readthedocs.io%2Fzh-cn%2Flatest%2Finference%2Fpipeline.html%23id1" target="_blank" rel="noreferrer">LMDeploy 使用文档</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from lmdeploy import pipeline, TurbomindEngineConfig</span></span>
<span class="line"><span></span></span>
<span class="line"><span>if __name__ == &#39;__main__&#39;:</span></span>
<span class="line"><span>    backend_config = TurbomindEngineConfig(tp=1,</span></span>
<span class="line"><span>                                           max_batch_size=64,</span></span>
<span class="line"><span>                                           cache_max_entry_count=0.1)</span></span>
<span class="line"><span>    # 没有本地模型，替换为 internlm/internlm2-chat-7b</span></span>
<span class="line"><span>    pipe = pipeline(&quot;./internlm2-chat-7b&quot;, backend_cofing=backend_cofing)</span></span>
<span class="line"><span>    response = pipe([&quot;你好 我是 Cleaner&quot;])</span></span>
<span class="line"><span>    print(response)</span></span></code></pre></div><h1 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h1><p>梳理 InternLM2 的特点，帮助想要使用大语言模型的个人开发者或者企业，在面对众多大语言模型时，能够了解大语言模型提供的能力，并结合自身的需求与成本，做出清晰明确的选择。</p><ul><li>开源免费、可商用。</li><li>超长上下文支持：200K token 的输入与理解。（书籍等大文本数据做摘要总结、若干轮对话后回忆之前的内容（大海捞针））</li><li>支持工具调用能力：能够在一次交互中多次调用工具，完成相对复杂的任务。（Agent）</li><li>支持微调和训练。（提供专有数据集，打造个人/企业私有化大模型）。</li></ul><h1 id="末尾" tabindex="-1">末尾 <a class="header-anchor" href="#末尾" aria-label="Permalink to &quot;末尾&quot;">​</a></h1><p>作为一名软件开发人员，大模型的相关应用已经成为我日常工作和生活中的常用工具，本人也在不断跟进了解人工智能的发展情况。</p><p>大模型从对话、聊天到工具调用、长文理解，乃至多模态，在不断打破人类认知，带给我们无限的想象空间。</p><p>也许未来的某一天，我们可以拥有自己的贾维斯（Friday）。</p>`,48)]))}const u=n(p,[["render",l]]);export{m as __pageData,u as default};
