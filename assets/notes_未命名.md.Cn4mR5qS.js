import{_ as s,c as e,o as t,ag as n}from"./chunks/framework.oP1PDRBo.js";const i="/docs/assets/image-20250324174327396.bscZiJ-V.png",p="/docs/assets/image-20250324174730502.CRXJh7pA.png",x=JSON.parse('{"title":"AJAX入门","description":"","frontmatter":{},"headers":[],"relativePath":"notes/未命名.md","filePath":"notes/未命名.md","lastUpdated":1742889915000}'),l={name:"notes/未命名.md"};function o(r,a,h,c,d,m){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="ajax入门" tabindex="-1">AJAX入门 <a class="header-anchor" href="#ajax入门" aria-label="Permalink to &quot;AJAX入门&quot;">​</a></h1><p>让数据活起来</p><h2 id="◆-ajax-概念和-axios-使用" tabindex="-1">◆ AJAX 概念和 axios 使用 <a class="header-anchor" href="#◆-ajax-概念和-axios-使用" aria-label="Permalink to &quot;◆   AJAX 概念和 axios 使用&quot;">​</a></h2><p>概念：AJAX 是浏览器与服务器进行数据通信的技</p><p>什么是 AJAX</p><h3 id="怎么用-ajax" tabindex="-1">怎么用 AJAX ？ <a class="header-anchor" href="#怎么用-ajax" aria-label="Permalink to &quot;怎么用 AJAX ？&quot;">​</a></h3><ol><li>先使用 axios [æk‘sioʊs] 库，与服务器进行数据通信 ⚫ 基于 XMLHttpRequest 封装、代码简单、月下载量在 14 亿次 ⚫ Vue、React 项目中都会用到 axios</li><li>再学习 XMLHttpRequest 对象的使用，了解 AJAX 底层原理</li></ol><h3 id="axios-使用" tabindex="-1">axios 使用 <a class="header-anchor" href="#axios-使用" aria-label="Permalink to &quot;axios 使用&quot;">​</a></h3><p>语法：</p><ol><li><p>引入 axios.js：<a href="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js" target="_blank" rel="noreferrer">https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js</a></p></li><li><p>使用 axios 函数 ✓ 传入配置对象 ✓ 再用 .then 回调函数接收结果，并做后续处理</p></li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>axios({</span></span>
<span class="line"><span>url: &#39;目标资源地址&#39; </span></span>
<span class="line"><span>}) .then((result) =&gt; {</span></span>
<span class="line"><span>// 对服务器返回的数据做后续处理</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>axios 使用 需求：请求目标资源地址，拿到省份列表数据，显示到页面 目标资源地址：<a href="http://hmajax.itheima.net/api/province" target="_blank" rel="noreferrer">http://hmajax.itheima.net/api/province</a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>axios({</span></span>
<span class="line"><span>url: &#39;http://hmajax.itheima.net/api/province&#39; </span></span>
<span class="line"><span>}) .then((result) =&gt; {</span></span>
<span class="line"><span>// 对服务器返回的数据做后续处理</span></span>
<span class="line"><span>})</span></span></code></pre></div><h2 id="◆-认识-url" tabindex="-1">◆ 认识 URL <a class="header-anchor" href="#◆-认识-url" aria-label="Permalink to &quot;◆   认识 URL&quot;">​</a></h2><p>什么是 URL？</p><p>定义：<img src="`+i+`" alt="image-20250324174327396"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>网页资源&lt;https://www.baidu.com/index.html&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>图片资源&lt;https://www.itheima.com/images/logo.png&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>数据资源&lt;http://hmajax.itheima.net/api/province&gt;</span></span></code></pre></div><p>概念：URL 就是统一资源定位符，简称网址，用于访问网络上的资源</p><h2 id="◆-url-查询参数" tabindex="-1">◆ URL 查询参数 <a class="header-anchor" href="#◆-url-查询参数" aria-label="Permalink to &quot;◆   URL 查询参数&quot;">​</a></h2><p>URL 的组成</p><p><img src="`+p+'" alt="image-20250324174730502"></p><p>组成：</p><p>协议</p><p>http 协议：超文本传输协议，规定浏览器和服务器之间传输数据的格式</p><p><a href="http://hmajax.itheima.net/api/province" target="_blank" rel="noreferrer">http://hmajax.itheima.net/api/province</a></p><p>协议</p><p>以指定格式传输数据</p><p>以指定格式解析服务器返回的资源</p><p>浏览器 服务器</p><p>协议范围:</p><p>http，https，..</p><h2 id="◆-常用请求方法和数据提交" tabindex="-1">◆ 常用请求方法和数据提交 <a class="header-anchor" href="#◆-常用请求方法和数据提交" aria-label="Permalink to &quot;◆  常用请求方法和数据提交&quot;">​</a></h2><h2 id="◆-http协议-报文" tabindex="-1">◆ HTTP协议-报文 <a class="header-anchor" href="#◆-http协议-报文" aria-label="Permalink to &quot;◆   HTTP协议-报文&quot;">​</a></h2><h2 id="◆-接口文档" tabindex="-1">◆ 接口文档 <a class="header-anchor" href="#◆-接口文档" aria-label="Permalink to &quot;◆   接口文档&quot;">​</a></h2><h2 id="◆-案例-用户登录" tabindex="-1">◆ 案例 - 用户登录 <a class="header-anchor" href="#◆-案例-用户登录" aria-label="Permalink to &quot;◆  案例 - 用户登录&quot;">​</a></h2><h2 id="◆-form-serialize-插件" tabindex="-1">◆ form-serialize 插件 <a class="header-anchor" href="#◆-form-serialize-插件" aria-label="Permalink to &quot;◆  form-serialize 插件&quot;">​</a></h2>',36)]))}const b=s(l,[["render",o]]);export{x as __pageData,b as default};
