import{_ as a,c as n,o as e,ag as p}from"./chunks/framework.oP1PDRBo.js";const g=JSON.parse('{"title":"二. vitepress","description":"","frontmatter":{},"headers":[],"relativePath":"vitepress/部署/支持PC和wap自适应.md","filePath":"vitepress/部署/支持PC和wap自适应.md","lastUpdated":1744448235000}'),t={name:"vitepress/部署/支持PC和wap自适应.md"};function i(l,s,c,o,d,r){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="二-vitepress" tabindex="-1">二. vitepress <a class="header-anchor" href="#二-vitepress" aria-label="Permalink to &quot;二. vitepress&quot;">​</a></h1><p><code>vitepress</code>是由<code>vite</code>的核心开发成员，<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fyyx990803" target="_blank" rel="noreferrer">Evan You</a> 创建，基于<code>vite</code>提供极速的<code>hmr</code>能力和快速的服务器启动。配置也十分简单，几乎只用书写<code>markdown</code>，就能搭建一个高性能的网站。</p><p>注意：截止目前，<code>vitepress</code>依然没有发布正式版本，当前最新版本是<code>1.0.0-alpha.29</code>。不建议使用在特别正式的环境。</p><h2 id="_1-vitepress最佳实践" tabindex="-1">1.vitepress最佳实践 <a class="header-anchor" href="#_1-vitepress最佳实践" aria-label="Permalink to &quot;1.vitepress最佳实践&quot;">​</a></h2><p>一般去学习一个新东西，往往会先去看它的官网：</p><ul><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitejs.cn%2Fvitepress%2F" target="_blank" rel="noreferrer">中文官网</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitepress.vuejs.org%2F" target="_blank" rel="noreferrer">英文官方</a></li><li><a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvitepress" target="_blank" rel="noreferrer">github地址</a></li></ul><p>但由于它的中文文档已经长达一年多不更新。英文文档虽然更新的很快，但有些部分仍然在编写中。所以最佳实践是，找一个比较 <strong>有名气</strong> 且是用<code>vitepress</code>搭建的网站，看它的源码，往往就是最佳实践。</p><p>比如说<code>vite</code>官网：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fvitejs.dev%2F" target="_blank" rel="noreferrer">vitejs.dev/</a></p><h3 id="_1-创建项目" tabindex="-1">(1).创建项目 <a class="header-anchor" href="#_1-创建项目" aria-label="Permalink to &quot;(1).创建项目&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir docs</span></span>
<span class="line"><span>pnpm init</span></span></code></pre></div><p>查看<code>vite</code>官网的<code>vitepress</code>是哪个版本，使用跟它一样的版本。 进入<code>vite</code>的<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fvitejs%2Fvite" target="_blank" rel="noreferrer">官方仓库</a>，查看项目下的<code>package.json</code>,找到<code>vitepress</code>的版本</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pnpm i vitepress@1.0.0-alpha.29</span></span></code></pre></div><h3 id="_2-查看vite的最佳实践" tabindex="-1">(2).查看vite的最佳实践 <a class="header-anchor" href="#_2-查看vite的最佳实践" aria-label="Permalink to &quot;(2).查看vite的最佳实践&quot;">​</a></h3><p>找到<code>vite</code>项目中的<code>docs</code>目录，查看目录结构</p><p>可以一个个点进去看看目录结构，先说下结论，</p><p><code>.vitepress</code>是配置文件(必需)。</p><p><code>index.md</code>是文档的入口。</p><p><code>public</code>是存放静态文件的地方，比如图片。</p><p><code>_data</code>里面是核心开发者的信息。其他目录里面都是<code>markdown</code>文件。</p><h3 id="_3-配置首页" tabindex="-1">(3).配置首页 <a class="header-anchor" href="#_3-配置首页" aria-label="Permalink to &quot;(3).配置首页&quot;">​</a></h3><p>首先创建<code>index.md</code>，它的内容就是首页，具体配置我们可以参考<code>vite</code>首页，基本就能发现是怎么配置的</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>---</span></span>
<span class="line"><span>layout: home</span></span>
<span class="line"><span></span></span>
<span class="line"><span>title: Vite</span></span>
<span class="line"><span>titleTemplate: Next Generation Frontend Tooling</span></span>
<span class="line"><span></span></span>
<span class="line"><span>hero:</span></span>
<span class="line"><span>  name: Vite // 网站的左上角标题</span></span>
<span class="line"><span>  text: Next Generation Frontend Tooling // 最中间的文字</span></span>
<span class="line"><span>  tagline: Get ready for a development environment that can finally catch up with you. // 最中间的文字</span></span>
<span class="line"><span>  image:</span></span>
<span class="line"><span>    src: /logo-with-shadow.png // 页面中最大的那个图标，默认地址 /public，放在public中无需写完整路径</span></span>
<span class="line"><span>    alt: Vite</span></span>
<span class="line"><span>  actions: // 对应页面上，vite英文介绍下面的三个按钮</span></span>
<span class="line"><span>    - theme: brand</span></span>
<span class="line"><span>      text: Get Started</span></span>
<span class="line"><span>      link: /guide/</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>   ... // 省略一部分</span></span>
<span class="line"><span></span></span>
<span class="line"><span>features: // 页面中下位置的文字介绍</span></span>
<span class="line"><span>  - icon: 💡</span></span>
<span class="line"><span>    title: Instant Server Start</span></span>
<span class="line"><span>    details: On demand file serving over native ESM, no bundling required!</span></span>
<span class="line"><span>  - icon: ⚡️</span></span>
<span class="line"><span>    title: Lightning Fast HMR</span></span>
<span class="line"><span>    details: Hot Module Replacement (HMR) that stays fast regardless of app size.</span></span>
<span class="line"><span>  ... // 省略一部分</span></span>
<span class="line"><span>---</span></span></code></pre></div><h3 id="_4-配置导航栏nav和config" tabindex="-1">(4).配置导航栏nav和config <a class="header-anchor" href="#_4-配置导航栏nav和config" aria-label="Permalink to &quot;(4).配置导航栏nav和config&quot;">​</a></h3><p>那么问题来了，最上方的导航栏是怎么配置的呢。导航栏在<code>.vitepress</code>里面的<code>config.ts</code>进行配置 目录结构如下</p><p>配置<code>config.ts</code>的内容</p><h1 id="三-github-actions配置" tabindex="-1">三. github actions配置 <a class="header-anchor" href="#三-github-actions配置" aria-label="Permalink to &quot;三. github actions配置&quot;">​</a></h1><h2 id="_1-github的配置" tabindex="-1">1.github的配置 <a class="header-anchor" href="#_1-github的配置" aria-label="Permalink to &quot;1.github的配置&quot;">​</a></h2><p>找到项目<code>setting</code>,配置<code>secrets</code>中的<code>actions</code></p><p>A.其中<code>secrets</code>是在个人设置<code>setting</code>进行设置</p><p>个人设置<code>setting</code> →Developer settings→Personal access tokens→Tokens（classic）→</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ghp_yanghhY3sIfA1nYNJ8vzSoGARtqth2itHB0RzI0M</span></span></code></pre></div><p>B.找到项目docs中的<code>setting</code>,配置<code>secrets</code>中的<code>actions</code></p><p>→setting→Secrets and variables→ Actions→New repository→name=docs→secrets→create→→→</p><h2 id="_2-项目增加actions" tabindex="-1">2.项目增加actions <a class="header-anchor" href="#_2-项目增加actions" aria-label="Permalink to &quot;2.项目增加actions&quot;">​</a></h2><p>新建目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>name: pages-build-site</span></span>
<span class="line"><span>on: </span></span>
<span class="line"><span>  push:  // 有代码push或者merge到main分支时，才进行下面的操作</span></span>
<span class="line"><span>    branches: </span></span>
<span class="line"><span>      - main</span></span>
<span class="line"><span>jobs:</span></span>
<span class="line"><span>  deploy:</span></span>
<span class="line"><span>    runs-on: ubuntu-latest </span></span>
<span class="line"><span>    steps:</span></span>
<span class="line"><span>      - name: Checkout</span></span>
<span class="line"><span>        uses: actions/checkout@v3</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Install Node.js</span></span>
<span class="line"><span>        uses: actions/setup-node@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          node-version: 16</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - uses: pnpm/action-setup@v2 // 配置使用pnpm</span></span>
<span class="line"><span>        name: Install pnpm</span></span>
<span class="line"><span>        id: pnpm-install</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          version: 7</span></span>
<span class="line"><span>          run_install: false</span></span>
<span class="line"><span>      </span></span>
<span class="line"><span>      - name: Get pnpm store directory</span></span>
<span class="line"><span>        id: pnpm-cache</span></span>
<span class="line"><span>        shell: bash</span></span>
<span class="line"><span>        run: |</span></span>
<span class="line"><span>          echo &quot;STORE_PATH=$(pnpm store path)&quot; &gt;&gt; $GITHUB_OUTPUT</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - uses: actions/cache@v3</span></span>
<span class="line"><span>        name: Setup pnpm cache</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          path: \${{ steps.pnpm-cache.outputs.STORE_PATH }}</span></span>
<span class="line"><span>          key: \${{ runner.os }}-pnpm-store-\${{ hashFiles(&#39;**/pnpm-lock.yaml&#39;) }}</span></span>
<span class="line"><span>          restore-keys: |</span></span>
<span class="line"><span>            \${{ runner.os }}-pnpm-store-</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Install dependencies</span></span>
<span class="line"><span>        run: pnpm install</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Build docs</span></span>
<span class="line"><span>        run: pnpm -F docs build</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      - name: Deploy</span></span>
<span class="line"><span>        uses: peaceiris/actions-gh-pages@v3</span></span>
<span class="line"><span>        with:</span></span>
<span class="line"><span>          github_token: \${{ secrets.RAN_ACTIONS_TOKEN }} // 配置在项目里的secrets</span></span>
<span class="line"><span>          exclude_assets: &#39;&#39;</span></span>
<span class="line"><span>          publish_dir: packages/docs/.vitepress/dist // 需要发布内容的路径</span></span></code></pre></div><p>上述命令简单来说就是：监听是否<code>push</code>或者<code>merge</code>到<code>main</code>分支，执行我们写好的打包命令<code>pnpm -F docs build</code>, 将指定路径的文件<code>packages/docs/.vitepress/dist</code>发布到一个指定的分支，默认是<code>gh-pages</code>。</p><p>如果这时候提交代码到<code>main</code>分支，点开<code>actions</code>能看到</p><p>如果这时候提交代码到<code>main</code>分支，点开<code>actions</code>能看到</p><p>如果有报错，我们还可以点进去看具体的报错情况，进行修改</p><p>需要注意下，设置部署网站的分支，因为静态网站的资源都在<code>gh-pages</code>分支上</p><p>至此访问<code>github</code>安排的链接，就可以看到页面啦</p><p>已经添加<code>MIT</code>协议，可以随便使用，欢迎<code>star</code>，<code>issue</code>，<code>pr</code>，互相学习，一起进步～</p><h2 id="部署到github-pages" tabindex="-1">部署到GitHub Pages <a class="header-anchor" href="#部署到github-pages" aria-label="Permalink to &quot;部署到GitHub Pages&quot;">​</a></h2><p>既然要部署到GitHub Pages，你得先在github新建一个仓库，因为要用他的GitHub Pages，所以仓库命名为username.github.io的形式，username是你github的用户名。然后点击设置</p><p>选择pages</p><p>这里设置根目录/(root),当然也可以选择其它目录,点击保存，如果选择其它目录比如docs，config.js就需要配置一个base</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export default {</span></span>
<span class="line"><span>    base:&#39;/docs/&#39;</span></span>
<span class="line"><span>  }</span></span></code></pre></div><p>最后选择一个主题(这里不选择我发现站点不生效,后面把打包后的代码推上来即可,会默认加载index.html)</p><p>然后将打包后的dist下的文件推送到你的远程仓库。vitepress官网给我们提供了一个脚本文件<code>deploy.sh</code>,我们只需要改下远程仓库即可</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#!/usr/bin/env sh</span></span>
<span class="line"><span># 忽略错误</span></span>
<span class="line"><span>set -e</span></span>
<span class="line"><span># 构建</span></span>
<span class="line"><span>npm run docs:build</span></span>
<span class="line"><span># 进入待发布的目录</span></span>
<span class="line"><span>cd docs/.vitepress/dist</span></span>
<span class="line"><span># 如果是发布到自定义域名</span></span>
<span class="line"><span># echo &#39;www.example.com&#39; &gt; CNAME</span></span>
<span class="line"><span>git init</span></span>
<span class="line"><span>git add -A</span></span>
<span class="line"><span>git commit -m &#39;deploy&#39;</span></span>
<span class="line"><span># 如果部署到 https://&lt;USERNAME&gt;.github.io</span></span>
<span class="line"><span># git push -f git@github.com:&lt;USERNAME&gt;/&lt;USERNAME&gt;.github.io.git master</span></span>
<span class="line"><span># 如果是部署到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;</span></span>
<span class="line"><span># git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pages</span></span>
<span class="line"><span>cd -</span></span></code></pre></div><p>直接执行这个脚本文件，我们的打包后的文件就会被推送到我们的仓库。然后我们就可以直接访问我们的静态博客站点了。如果你想要自定义其它域名的话,可以创建一个组织然后在组织下新建仓库名为organization.github.io的形式(organization是你组织名)然后执行同样的操作即可。具体可以点这里[创建 GitHub Pages 站点(<a href="https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fpages%2Fgetting-started-with-github-pages%2Fcreating-a-github-pages-site" target="_blank" rel="noreferrer">https://link.juejin.cn?target=https%3A%2F%2Fdocs.github.com%2Fcn%2Fpages%2Fgetting-started-with-github-pages%2Fcreating-a-github-pages-site</a>)</p>`,52)]))}const u=a(t,[["render",i]]);export{g as __pageData,u as default};
