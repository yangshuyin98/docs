import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.oP1PDRBo.js";const o=JSON.parse('{"title":"新建一个项目","description":"","frontmatter":{},"headers":[],"relativePath":"notes/git常用命令.md","filePath":"notes/git常用命令.md","lastUpdated":1743405079000}'),h={name:"notes/git常用命令.md"};function e(l,s,p,k,d,g){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="新建一个项目" tabindex="-1">新建一个项目 <a class="header-anchor" href="#新建一个项目" aria-label="Permalink to &quot;新建一个项目&quot;">​</a></h1><p>点击右上角的 +号，新建项目。 填写mytest项目信息，最后点击创建即可。 新建项目成功。</p><h2 id="克隆项目到本地" tabindex="-1">克隆项目到本地 <a class="header-anchor" href="#克隆项目到本地" aria-label="Permalink to &quot;克隆项目到本地&quot;">​</a></h2><p>点击克隆，然后点击SSH Clone项目的复制链接按钮，复制git链接。 接着，在本地目录空白处D:/Chinacode中右键菜单，点击Git Bash Here。 克隆远程仓库 输入git clone 刚刚的git链接，如下</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone https://gitcode.com/yang_shu_yin/test.git</span></span></code></pre></div><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git clone git@github.com:yangshuyin98/docs.git</span></span></code></pre></div><p>成功后，本地目录即可看到克隆下来的文件。</p><h2 id="创建本地git仓库、添加文件" tabindex="-1">创建本地Git仓库、添加文件 <a class="header-anchor" href="#创建本地git仓库、添加文件" aria-label="Permalink to &quot;创建本地Git仓库、添加文件&quot;">​</a></h2><p>在本地添加文件，如下，添加一个HelloWorld.txt文件。</p><p>1.初始化仓库 mkdir my-project # 创建项目目录 cd my-project # 进入目录 git init # 初始化Git仓库（生成隐藏的.git文件夹） 使用 git init 命令初始化一个新的Git仓库。这会在当前目录下生成一个 .git 的隐藏文件夹，用于存储Git的版本控制信息。表示仓库已经初始化完成。 验证初始化：ls -a（查看是否存在.git目录）。 在D盘上成功创建了一个Git仓库。您可以使用其他Git命令来管理和操作您的仓库，如创建分支、合并更改等。</p><h2 id="关联本地工程到远程仓库" tabindex="-1">关联本地工程到远程仓库 <a class="header-anchor" href="#关联本地工程到远程仓库" aria-label="Permalink to &quot;关联本地工程到远程仓库&quot;">​</a></h2><ol><li><p>有时候，我们可能是先在本地有了工程文件，然后再在gitee上创建仓库的。</p><ol><li><strong>添加远程仓库</strong>：</li><li>（可在本地库上使用命令 git remote add把它和 gitee 的远程库关联），如下：</li></ol><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git remote add origin https://xxxxx.git    # 添加远程仓库别名</span></span></code></pre></div><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push -u origin main         # 首次推送并建立追踪关系</span></span></code></pre></div><p>同步代码</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>git push origin main 推送本地提交：</span></span>
<span class="line"><span>git pull origin main                拉取远程更新：（自动合并）</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">注意事项：</p><p>error: remote origin already exists.</p><p>说明本地库已经关联了一个名叫 origin的远程库，此时，可以先用git remote -v查看远程库信息：</p><p>如果在使用命令 git remote add时报错:</p></div></li></ol><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   git remote -v</span></span>
<span class="line"><span>   origin git@gitee.com:linxinfa/mytest.git (fetch)</span></span>
<span class="line"><span>   origin git@gitee.com:linxinfa/mytest.git (push)</span></span></code></pre></div><p>我们可以删除已有的远程库 git remote rm origin 再关联远程库</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>   git remote add  git@github.com:yangshuyin98/docs.git</span></span></code></pre></div><p>:::</p><h2 id="执行git命令-提交文件" tabindex="-1">执行git命令，提交文件 <a class="header-anchor" href="#执行git命令-提交文件" aria-label="Permalink to &quot;执行git命令，提交文件&quot;">​</a></h2><p>打开git，执行git的add、commit、push命令，即可将本地文件上传到远程仓库。 注：常用的git命令见文章最后面。</p><h3 id="将文件加入暂存区" tabindex="-1">将文件加入暂存区 <a class="header-anchor" href="#将文件加入暂存区" aria-label="Permalink to &quot;将文件加入暂存区&quot;">​</a></h3><ol><li><p>cd mytest/ #进入mytest目录</p></li><li><p><strong>复制文件</strong>：将你想要上传的文件复制到这个已经初始化的Git仓库文件夹中。</p></li><li><p>添加文件：将要包含在仓库中的文件添加到仓库中。您可以使用以下命令将一个或多个文件添加到暂存区： git add &lt;文件名&gt;命令 将一个或多个文件添加到Git仓库中。（请将 &lt;文件名&gt;替换为要添加的具体文件名。)</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 添加单个文件 git add &lt;文件名&gt; 命令</span></span></code></pre></div><p>想要添加所有文件，可以使用<code>git add .</code>命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               # 添加所有修改和新文件（不包含已删除文件）git add . 将所有文件添加到暂存区。</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              # #添加全部文件添加所有变更（包括删除的文件）</span></span></code></pre></div><h3 id="提交更改" tabindex="-1">提交更改 <a class="header-anchor" href="#提交更改" aria-label="Permalink to &quot;提交更改&quot;">​</a></h3><p>使用 git commit -m &quot;信息&quot; 命令正式将文件提交到本地仓库，并添加注释信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;首次提交&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                           #提交修改描述</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Initial commit: add project files&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;HelloWorld&quot;</span></span></code></pre></div><p>查看提交状态：git status -sb。或 git status 命令检查当前仓库的状态。</p><p>实时状态监控</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 显示工作区和暂存区状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> diff</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 查看未暂存的修改内容</span></span></code></pre></div><p>提交历史追溯</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 显示完整提交历史（含作者、日期、哈希值）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --oneline</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # 简洁模式（仅显示提交信息与哈希）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --graph</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 图形化显示分支合并历史。</span></span></code></pre></div><p>创建与切换分支</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # 创建新分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 切换到dev分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     # 创建并切换分支（合并上述两步）</span></span></code></pre></div><p>合并与解决冲突</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 将dev分支合并到当前分支</span></span></code></pre></div><p>当同一文件被不同分支修改时，Git会标记冲突内容（&lt;&lt;&lt;&lt;&lt;&lt; HEAD至&gt;&gt;&gt;&gt;&gt;&gt; dev），手动修改后重新提交。</p><h3 id="推送本地提交" tabindex="-1"><strong>推送本地提交</strong> <a class="header-anchor" href="#推送本地提交" aria-label="Permalink to &quot;**推送本地提交**&quot;">​</a></h3><h4 id="第一次推送使用" tabindex="-1">第一次推送使用 <a class="header-anchor" href="#第一次推送使用" aria-label="Permalink to &quot;第一次推送使用&quot;">​</a></h4><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 首次推送并建立追踪关系</span></span></code></pre></div><p>注意：这里的<code>-u</code>选项是为了设置本地分支与远程分支的跟踪关系，而<code>origin</code>代表远程仓库，<code>main</code>代表本地主分支。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #将在本地仓库中的提交推送到GitCode上的远程仓库。</span></span></code></pre></div><p>注意：这里的<code>-u</code>选项是为了本地分支与远程分支建立跟踪关系，完成这一步，而<code>origin</code>代表远程仓库，<code>master</code>代表本地主分支。 刷新GitCode页面，即可看到本地文件已经上传到GitCode上了</p><h4 id="第二次及之后的推送操作" tabindex="-1">第二次及之后的推送操作 <a class="header-anchor" href="#第二次及之后的推送操作" aria-label="Permalink to &quot;第二次及之后的推送操作&quot;">​</a></h4><p>修改文件后提交到本地仓库</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> word</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Add File, Hello word&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           #提交修改描述   提交文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>git commit -m &quot;更新文件说明&quot; 将 <code>commit message</code> 为对你所做更改的描述，这有助于以后的代码审查和维护。</p><p>直接推送（已建立追踪关系）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span></span></code></pre></div><p>若未建立追踪关系，需完整命令</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><h4 id="合并远程更新-推荐" tabindex="-1">合并远程更新（推荐） <a class="header-anchor" href="#合并远程更新-推荐" aria-label="Permalink to &quot;合并远程更新（推荐）&quot;">​</a></h4><p>远程仓库存在你本地没有的更新 远程分支已更新：其他协作者或你在其他设备上推送了新的提交到远程仓库（如 GitHub）。 本地分支落后于远程：你未先拉取（pull）远程的最新代码，导致本地提交历史与远程冲突，无法直接推送 通过 git pull 拉取远程代码并合并到本地，解决冲突后重新推送：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pull</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             #拉取远程代码（自动合并）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;合并远程更新&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 标记冲突已解决并提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          #重新推送</span></span></code></pre></div><h2 id="附加建议" tabindex="-1">附加建议 <a class="header-anchor" href="#附加建议" aria-label="Permalink to &quot;附加建议&quot;">​</a></h2><h3 id="检查追踪关系" tabindex="-1">检查追踪关系 <a class="header-anchor" href="#检查追踪关系" aria-label="Permalink to &quot;检查追踪关系&quot;">​</a></h3><p>git branch -vv # 确认本地分支已关联远程分支（显示 [origin/main]） 若未关联，需先执行： git push -u origin main # 首次推送时建立追踪关系</p><h3 id="避免重复冲突" tabindex="-1">避免重复冲突 <a class="header-anchor" href="#避免重复冲突" aria-label="Permalink to &quot;避免重复冲突&quot;">​</a></h3><p>推送前养成先 pull 的习惯。 使用 git fetch + git diff 预检查远程更新。 主分支（main/master）用于生产环境，开发在dev分支，功能开发使用特性分支（feature/*）。 通过git fetch获取远程更新，避免长期未同步导致合并冲突 通过以上步骤，你就可以成功创建并初始化一个本地Git仓库。</p><h3 id="账号密码验证不通过-密码或者权限不对-导致-git-操作失败" tabindex="-1">账号密码验证不通过，密码或者权限不对，导致 Git 操作失败 <a class="header-anchor" href="#账号密码验证不通过-密码或者权限不对-导致-git-操作失败" aria-label="Permalink to &quot;账号密码验证不通过，密码或者权限不对，导致 Git 操作失败&quot;">​</a></h3><p>​解决方法一 (最有效) ​输入：git config --system --unset credential.helper ​再次进行 Git 操作，输入正确的用户名，密码即可。 ​ ​解决方法二 ​输入：git config –global http.emptyAuth true ​再次进行 Git 操作，输入正确的用户名，密码即可。 ​ ​解决方法三 ​进入控制面板》用户账号》凭据管理器？windows凭据》普通凭据，在里面找到git，点开编辑密码，更新为最新密码之后就可以正常操作了。</p><h2 id="小技巧" tabindex="-1">小技巧 <a class="header-anchor" href="#小技巧" aria-label="Permalink to &quot;小技巧&quot;">​</a></h2><h3 id="_1、如何在readme-md中显示图片" tabindex="-1">1、如何在README.md中显示图片 <a class="header-anchor" href="#_1、如何在readme-md中显示图片" aria-label="Permalink to &quot;1、如何在README.md中显示图片&quot;">​</a></h3><p>格式</p><p>​<img src="https://xxxxxxxxxxxxxxxxxxx" alt="名称"> 先把图片上传到GitCode工程中，然后点击下载，即可得到图片的https链接 接着编辑README.md文件 以![()(地址]的格式，将<a href="https://xxxxxxxxxxxxxxxxxxx" target="_blank" rel="noreferrer">https://xxxxxxxxxxxxxxxxxxx</a>替换为刚刚复制的图片链接 提交即可显示图片</p><h3 id="_2、readme-md如何换行" tabindex="-1">2、README.md如何换行 <a class="header-anchor" href="#_2、readme-md如何换行" aria-label="Permalink to &quot;2、README.md如何换行&quot;">​</a></h3><p>行末尾敲两个空格再回车</p><h2 id="删除项目" tabindex="-1">删除项目 <a class="header-anchor" href="#删除项目" aria-label="Permalink to &quot;删除项目&quot;">​</a></h2><p>点击项目设置</p><p>点开高级的展开按钮 拉到最下面，即可看到删除项目按钮</p><h2 id="常用的git命令" tabindex="-1">常用的git命令 <a class="header-anchor" href="#常用的git命令" aria-label="Permalink to &quot;常用的git命令&quot;">​</a></h2><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #把当前目录变成git可以管理的仓库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git地址</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #克隆项目</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> readme.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #添加一个文件，也可以添加文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -A</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #添加全部文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.txt</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #删除一个文件，也可以删除文件夹</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> “some</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit”</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #提交修改</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> status</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #查看是否还有未提交</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> log</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #查看最近日志</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #版本回退一个版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD^^</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #版本回退两个版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --hard</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HEAD~100</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #版本回退多个版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +地址</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #远程仓库的提交（第一次链接）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> master#仓库关联</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #远程仓库的提交（第二次及之后）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #从远程获取代码库</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> xxx</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #打tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tag</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 显示所有tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --tag</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #提交tag</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> branch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #显示所有分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> checkout</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 分支名</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #切换分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git分支</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #合并分支</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">更多的git命令，可以输入git</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --help查看，或者访问git命令手册：https://git-scm.com/docs</span></span></code></pre></div>`,73)]))}const F=i(h,[["render",e]]);export{o as __pageData,F as default};
