import{_ as a,c as i,o as n,ag as p}from"./chunks/framework.oP1PDRBo.js";const g=JSON.parse('{"title":"Movie所有需要的字段","description":"","frontmatter":{},"headers":[],"relativePath":"blogs/Movie所有需要的字段.md","filePath":"blogs/Movie所有需要的字段.md","lastUpdated":1744277030000}'),l={name:"blogs/Movie所有需要的字段.md"};function t(e,s,h,k,d,r){return n(),i("div",null,s[0]||(s[0]=[p(`<h1 id="movie所有需要的字段" tabindex="-1">Movie所有需要的字段 <a class="header-anchor" href="#movie所有需要的字段" aria-label="Permalink to &quot;Movie所有需要的字段&quot;">​</a></h1><p>现在我来详细说明如何重新创建<code>Movie</code>表并插入示例数据，然后通过Flask应用查询和展示这些数据。</p><h3 id="_1-修改模型" tabindex="-1"><strong>1. 修改模型</strong> <a class="header-anchor" href="#_1-修改模型" aria-label="Permalink to &quot;**1. 修改模型**&quot;">​</a></h3><p>确保<code>Movie</code>模型中包含所有需要的字段：<code>id</code>、<code>title</code>、<code>src</code>、<code>release_year</code>和<code>description</code>。</p><p>**示例模型：**modles.py</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Movie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">db</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.Integer, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">primary_key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">True</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.String(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nullable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.String(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">nullable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    release_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.Integer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> db.Column(db.Text)</span></span></code></pre></div><h3 id="_2-更新数据库表结构" tabindex="-1"><strong>2. 更新数据库表结构</strong> <a class="header-anchor" href="#_2-更新数据库表结构" aria-label="Permalink to &quot;**2. 更新数据库表结构**&quot;">​</a></h3><p>如果数据库中没有<code>movie</code>表，需要通过以下方式创建：</p><p><strong>手动创建表</strong>：</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> movie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AUTO_INCREMENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    release_year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    description</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TEXT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><strong>使用Flask-Migrate</strong>：</p><p>flask db init flask db migrate -m &quot;initial migration&quot; flask db upgrade</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flask</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> migrate</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;生成迁移脚本&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">python</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> flask</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> db</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upgrade</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 应用迁移脚本</span></span></code></pre></div><h3 id="_3-插入示例数据" tabindex="-1"><strong>3. 插入示例数据</strong> <a class="header-anchor" href="#_3-插入示例数据" aria-label="Permalink to &quot;**3. 插入示例数据**&quot;">​</a></h3><p>将示例数据插入到<code>movie</code>表中。假设视频文件存储在项目的<code>static/videos</code>目录下。</p><p><strong>示例代码：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>from app import create_app, db</span></span>
<span class="line"><span>from app.models import Movie</span></span>
<span class="line"><span></span></span>
<span class="line"><span>app = create_app()</span></span>
<span class="line"><span></span></span>
<span class="line"><span>def add_movie(title, src, release_year=None, description=None):</span></span>
<span class="line"><span>    with app.app_context():</span></span>
<span class="line"><span>        movie = Movie(</span></span>
<span class="line"><span>            title=title,</span></span>
<span class="line"><span>            src=src,</span></span>
<span class="line"><span>            release_year=release_year,</span></span>
<span class="line"><span>            description=description</span></span>
<span class="line"><span>        )</span></span>
<span class="line"><span>        db.session.add(movie)</span></span>
<span class="line"><span>        db.session.commit()</span></span>
<span class="line"><span>        print(f&quot;电影 &#39;{title}&#39; 已添加到数据库&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 示例：添加两个电影</span></span>
<span class="line"><span>add_movie(</span></span>
<span class="line"><span>    title=&quot;02_身份认证的概念.mp4&quot;,</span></span>
<span class="line"><span>    src=&quot;02_身份认证的概念.mp4&quot;,</span></span>
<span class="line"><span>    release_year=2023,</span></span>
<span class="line"><span>    description=&quot;关于身份认证的概念介绍&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>add_movie(</span></span>
<span class="line"><span>    title=&quot;movie1.mp4&quot;,</span></span>
<span class="line"><span>    src=&quot;movie1.mp4&quot;,</span></span>
<span class="line"><span>    release_year=2023,</span></span>
<span class="line"><span>    description=&quot;示例电影&quot;</span></span>
<span class="line"><span>)</span></span></code></pre></div><h3 id="_4-查询视频信息" tabindex="-1"><strong>4. 查询视频信息</strong> <a class="header-anchor" href="#_4-查询视频信息" aria-label="Permalink to &quot;**4. 查询视频信息**&quot;">​</a></h3><p>在Flask路由中查询视频信息并传递给模板。</p><p><strong>示例路由：</strong></p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flask </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render_template</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> create_app</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.models </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Movie</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> create_app()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@main.route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> app.app_context():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 查询电影的ID和标题</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        movies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Movie.query.with_entities(Movie.id, Movie.title).all()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, movies)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> render_template(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;index.html&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">movies</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">movies)</span></span></code></pre></div><h3 id="_5-在模板中展示视频" tabindex="-1"><strong>5. 在模板中展示视频</strong> <a class="header-anchor" href="#_5-在模板中展示视频" aria-label="Permalink to &quot;**5. 在模板中展示视频**&quot;">​</a></h3><p>在<code>index.html</code>模板中，可以展示视频的标题，并提供播放链接或直接嵌入视频播放器。</p><p><strong>示例模板：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>    &lt;title&gt;电影列表&lt;/title&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>    &lt;h1&gt;电影列表&lt;/h1&gt;</span></span>
<span class="line"><span>    &lt;ul&gt;</span></span>
<span class="line"><span>        {% for movie in movies %}</span></span>
<span class="line"><span>            &lt;li&gt;</span></span>
<span class="line"><span>                &lt;a href=&quot;{{ url_for(&#39;main.play_movie&#39;, movie_id=movie.id) }}&quot;&gt;{{ movie.title }}&lt;/a&gt;</span></span>
<span class="line"><span>            &lt;/li&gt;</span></span>
<span class="line"><span>        {% endfor %}</span></span>
<span class="line"><span>    &lt;/ul&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><h3 id="_6-播放视频" tabindex="-1"><strong>6. 播放视频</strong> <a class="header-anchor" href="#_6-播放视频" aria-label="Permalink to &quot;**6. 播放视频**&quot;">​</a></h3><p>可以添加一个路由来播放视频。通过<code>url_for</code>生成视频路径。</p><p><strong>示例播放路由：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@main.route(&#39;/play/&lt;int:movie_id&gt;&#39;)</span></span>
<span class="line"><span>def play_movie(movie_id):</span></span>
<span class="line"><span>    with app.app_context():</span></span>
<span class="line"><span>        movie = Movie.query.get_or_404(movie_id)</span></span>
<span class="line"><span>        return render_template(&#39;play.html&#39;, movie=movie)</span></span></code></pre></div><p><strong>播放模板（play.html）：</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;!DOCTYPE html&gt;</span></span>
<span class="line"><span>&lt;html&gt;</span></span>
<span class="line"><span>&lt;head&gt;</span></span>
<span class="line"><span>    &lt;title&gt;播放 {{ movie.title }}&lt;/title&gt;</span></span>
<span class="line"><span>&lt;/head&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>    &lt;h1&gt;播放 {{ movie.title }}&lt;/h1&gt;</span></span>
<span class="line"><span>    &lt;p&gt;发布年份: {{ movie.release_year }}&lt;/p&gt;</span></span>
<span class="line"><span>    &lt;p&gt;描述: {{ movie.description }}&lt;/p&gt;</span></span>
<span class="line"><span>    &lt;video width=&quot;800&quot; controls&gt;</span></span>
<span class="line"><span>        &lt;source src=&quot;{{ movie.src }}&quot; type=&quot;video/mp4&quot;&gt;</span></span>
<span class="line"><span>        您的浏览器不支持视频播放。</span></span>
<span class="line"><span>    &lt;/video&gt;</span></span>
<span class="line"><span>&lt;/body&gt;</span></span>
<span class="line"><span>&lt;/html&gt;</span></span></code></pre></div><h3 id="验证" tabindex="-1"><strong>验证</strong> <a class="header-anchor" href="#验证" aria-label="Permalink to &quot;**验证**&quot;">​</a></h3><ol><li><strong>检查数据库表结构</strong>：确保<code>movie</code>表已创建，并包含所有需要的列。</li><li><strong>检查数据插入</strong>：确保示例数据已成功插入数据库。</li><li><strong>运行应用</strong>：启动Flask应用，访问<code>http://localhost:5000</code>，确保电影列表正确显示。</li><li><strong>播放视频</strong>：点击电影链接，确保视频能够正确播放。</li></ol>`,33)]))}const c=a(l,[["render",t]]);export{g as __pageData,c as default};
