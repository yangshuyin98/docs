import{_ as e,c as p,o as t,ag as s}from"./chunks/framework.oP1PDRBo.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"frontEnd/Node.js/Webpack.md","filePath":"frontEnd/Node.js/Webpack.md","lastUpdated":1743649620000}'),c={name:"frontEnd/Node.js/Webpack.md"};function r(l,a,n,i,o,b){return t(),p("div",null,a[0]||(a[0]=[s('<h2 id="webpack" tabindex="-1">Webpack <a class="header-anchor" href="#webpack" aria-label="Permalink to &quot;Webpack&quot;">​</a></h2><h4 id="什么是-webpack" tabindex="-1">什么是 Webpack？ <a class="header-anchor" href="#什么是-webpack" aria-label="Permalink to &quot;什么是 Webpack？&quot;">​</a></h4><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">定义：</a></p><p>Webpack 是一个模块打包工具，主要用于现代 JavaScript 应用程序的构建。它能够将各种资源（如 JavaScript、CSS、图片等）视为模块，并通过配置文件将其打包成一个或多个最终的输出文件。Webpack 的主要功能包括：</p><ol><li><p><strong>模块打包</strong>：Webpack 可以将项目中的所有模块（如 JavaScript 文件、CSS 文件、图片等）打包成一个或多个最终的输出文件。</p></li><li><p><strong>代码分割</strong>：Webpack 支持代码分割，可以将代码分成多个小块，按需加载，从而提高应用的性能。</p></li><li><p><strong>热模块替换（HMR）</strong>：在开发过程中，Webpack 提供了热模块替换功能，可以在不刷新整个页面的情况下更新部分模块，提升开发效率。</p></li><li><p><strong>插件系统</strong>：Webpack 有一个强大的插件系统，可以通过安装和使用各种插件来扩展其功能，例如自动清理输出目录、压缩代码、处理环境变量等。</p></li><li><p><strong>加载器（Loaders）</strong>：Webpack 使用加载器来处理不同类型的文件。例如，<code>babel-loader</code> 可以将 ES6+ 代码转换为 ES5 代码，<code>css-loader</code> 和 <code>style-loader</code> 可以处理 CSS 文件。</p></li><li><p><strong>优化</strong>：Webpack 提供了一些内置的优化选项，可以帮助减少打包后的文件大小，提高应用的加载速度。</p></li><li><p><strong>跨平台支持</strong>：Webpack 不仅可以在桌面环境中运行，还可以在服务器端（如 Node.js 环境中）运行。</p></li></ol><p>总之，Webpack 是一个非常强大且灵活的工具，广泛应用于前端开发中，帮助开发者更高效地管理和构建复杂的 JavaScript 应用程序。</p><p>静态模块：指的是编写代码过程中的，html，css，js，图片等固定内容的文件</p><p>打包：把静态模块内容，压缩，整合，转译等（前端工程化）</p><ul><li>把 less / sass 转成 css 代码</li><li>把 ES6+ 降级成 ES5</li><li>支持多种模块标准语法</li></ul><p>问题：为何不学 vite ？</p><p>因为：很多项目还是基于 Webpack 构建，并为 Vue</p><p>React 脚手架使用做铺垫！</p><h4 id="使用-webpack" tabindex="-1">使用 Webpack <a class="header-anchor" href="#使用-webpack" aria-label="Permalink to &quot;使用 Webpack&quot;">​</a></h4><p>需求：封装 utils 包，校验手机号长度和验证码长度，在 src/index.js 中使用并打包观察</p><p>步骤：</p><p>1.新建并初始化项目，编写业务源代码</p><p>2.下载 webpack webpack-cli 到当前项目中（版本独立），并配置局部自定义命令</p><p>3.运行打包命令，自动产生 dist 分发文件夹（压缩和优化后，用于最终运行的代码）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i webpack webpack-cli --save-dev</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm run build</span></span></code></pre></div><h4 id="修改-webpack-打包入口和出口" tabindex="-1">修改 Webpack 打包入口和出口 <a class="header-anchor" href="#修改-webpack-打包入口和出口" aria-label="Permalink to &quot;修改 Webpack 打包入口和出口&quot;">​</a></h4><p><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">Webpack </a><a href="https://webpack.docschina.org/concepts/" target="_blank" rel="noreferrer">配置：</a>影响 Webpack 打包过程和结果</p><p>步骤：</p><p>1.项目根目录，新建 webpack.config.js 配置文件</p><p>2.导出配置对象，配置入口，出口文件的路径</p><p>3.重新打包观察</p><p>注意：只有和入口产生直接/间接的引入关系，才会被打包</p><h4 id="用户登录-长度判断" tabindex="-1">用户登录 - 长度判断 <a class="header-anchor" href="#用户登录-长度判断" aria-label="Permalink to &quot;用户登录 - 长度判断&quot;">​</a></h4><p>需求：点击登录按钮，判断手机号和验证码长度</p><p>步骤：</p><p>1.准备用户登录页面</p><p>2.编写核心 JS 逻辑代码</p><p>3.打包并手动复制网页到 dist 下，引入打包后的 js，运行</p><p>核心：Webpack 打包后的代码，作用在前端网页中使用</p><p>自动生成 html 文件</p><p><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noreferrer">插件</a><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noreferrer"> html-webpack-plugin</a><a href="https://webpack.docschina.org/plugins/html-webpack-plugin/" target="_blank" rel="noreferrer">：</a> 在 Webpack 打包时生成 html 文件</p><p>步骤：</p><p>1.下载 html-webpack-plugin 本地软件包</p><p>2.配置 webpack.config.js 让 Webpack 拥有插件功能</p><p>3.重新打包观察效果</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i html-webpack-plugin  --save-dev</span></span></code></pre></div>',41)]))}const h=e(c,[["render",r]]);export{k as __pageData,h as default};
