import{_ as e,c as s,o,ag as n}from"./chunks/framework.oP1PDRBo.js";const a="/docs/img_article/image-20250313093250907.png",j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vuepress/A_Node.js安装.md","filePath":"vuepress/A_Node.js安装.md","lastUpdated":1744031461000}'),t={name:"vuepress/A_Node.js安装.md"};function d(r,p,i,c,m,l){return o(),s("div",null,p[0]||(p[0]=[n('<h2 id="下载node-js" tabindex="-1">下载Node.js <a class="header-anchor" href="#下载node-js" aria-label="Permalink to &quot;下载Node.js&quot;">​</a></h2><p>直接搜索框输入Node.js，就能够看到Node.js那妩媚的身影。</p><p>出现了3个网站，这是关于Node.js至关重要的三个网站。</p><p>第一个，Node.js中文网，顾名思义，就是Node.js文档的中文版本，不过，并不是百分百的中文，翻译文档也是很麻烦的，说明文档太多了，而且Node.js更新速度，比火箭还快。</p><p>我日常查Node.js文档，这个网站用得比较多，感谢这些幕后的英雄！</p><p>第二个网站，就是我们的Node.js官方网站了。我一般下载Nodjs是在这里下载，本文的安装演示，也将在这个网站下载Node.js的相关文件。</p><p>第二个网站，菜鸟教程。这是一个非常好的入门教程网站。几乎我学习任何一门感兴趣的语言，这上面都会有非常浅显易懂的教程。而且，手机排版也非常精美，适合全天候学习。</p><p>由官方的说明，更加说明了，Node.js是一个运行环境的本质</p><p>提示：上图的“拥有最细的特性”，应该是“最新的特性”，截图没有文字好修改，特在此说明一下。</p><p>我的建议跟官方的建议不谋而合：建议下载长期支持版本。V22.14.0（LTS ），那个LTS 表示的英文意思就是 long support stable(长期支持稳定版)</p><p>那么这里有个问题？msi是什么文件？它的意思就是MicroSoft installer(微软安装器)。</p><p>我们知道，有时候我们安装软件，是exe格式的可执行文件。那么它们两者有什么区别呢？</p><p>MSI更全面，更自动化，比如，自动注册到系统注册表，可以管理软件的安装，卸载，更新等。</p><p>EXE更灵活，配置性更强，不过这个是需要开发者做一些额外的工作。</p><p>找到我们刚才下载的软件，双击它。</p><p>运行之。next 下一步</p><p>勾选，我接受许可协议（使用人家的东西，就得接受人家的许可声明）</p><p>点击，next，下一步</p><p>安装路径，我的是默认在c盘的Program Files的nodejs目录下。</p><p>平时我们安装软件，应该也看到过这Program Files，它表示的是，64位软件的默认安装目录。</p><p>Program Files(x86)表示32位软件的安装默认路径。</p><p>非常有意思的一个步骤，我们可以在这个步骤里，Nodejs安装哪些东西。</p><p>首先，性能计数和事件跟踪，这个我们可以先不管。</p><p>下一个，<a href="https://zhida.zhihu.com/search?content_id=105372846&amp;content_type=Article&amp;match_order=1&amp;q=npm&amp;zhida_source=entity" target="_blank" rel="noreferrer">npm</a> package manager(npm包管理)</p><p>这是Nodejs默认的包管理工具，它有什么作用呢？</p><p>我们知道，windows操作系统，需要安装一个软件的话，要去百度查找，然后进入网站，下载，安装。</p><p>用过Linux操作系统的都知道，linux系统的安装方式跟windows不一样，linux是集中式的安装方式。什么意思呢？所有的软件包，都放到一个地方，然后使用专门的工具，去这里下载。</p><p>比如，centos 使用的是yum/dnf的方式安装软件。</p><p>debian使用apt/apt-get等方式安装软件。</p><p>archlinux使用pacman的方式安装软件。</p><p>同上，ndoejs安装一些软件包，使用的就是npm。</p><p>那么，在这个地方，我们可以自行决定，安不安装这个npm包管理工具。</p><p>所以，让我们继续倒腾，如果选择安装nodejs package manager会怎么样？</p><p>其中就有我们的npm安装包管理器。</p><p>那么，还多了一个npx，这是个什么东西呢？</p><p>来验证一下我们是否安装成功了。</p><p>按下ctrl + r组合键，弹出运行弹框，然后输入cmd，点击确定。</p><p>那么CMD表示什么意思呢，就是command（命令行）的缩写。</p><p>输入node -v，表示，打印nodejs的版本。</p><p>如果显示了版本号，就说明安装成功了。</p><p>可以看到，正确地输出了nodejs的版本号10.15.3（v22.14.0）</p><p>没错，我们下载的是10.16.2，这里却打印了10.15.3！！！震惊！！</p><p>继续输入where node（顾名思义：node在哪里）</p><p>打印了两个地址，一个是E盘下面的node，一个是c盘，也即是我们刚刚安装的位置。</p><p>去E盘下看看，也有一个node.js。</p><p>没错，这是我之前已经安装过的node.js。</p><p>不过，发现没有？这里多了更多的文件。</p><p>这是我们接下来将会讲到的一个安装方式，此处暂且不表。</p><p>先来看看，如何解决目前的问题：怎么打印我们刚才安装的node.js版本？</p><h2 id="node-js安装-环境变量" tabindex="-1">Node.js安装 - <a href="https://zhida.zhihu.com/search?content_id=105372846&amp;content_type=Article&amp;match_order=1&amp;q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&amp;zhida_source=entity" target="_blank" rel="noreferrer">环境变量</a> <a class="header-anchor" href="#node-js安装-环境变量" aria-label="Permalink to &quot;Node.js安装 - [环境变量](https://zhida.zhihu.com/search?content_id=105372846&amp;content_type=Article&amp;match_order=1&amp;q=环境变量&amp;zhida_source=entity)&quot;">​</a></h2><p>要想得到上个问题的答案，就得引入一个新的概念：环境变量。</p><p>那么环境变量如何查看呢？</p><p>方式很多，其一即可。</p><p>我们几步并做一步，直接如图所示，在【计算机】上，右击。在点击【属性】</p><p>选择后，进入到【系统属性】弹框，点击我们的正主【环境变量】。</p><p>可以看到，弹出的环境面板中，有两个不同的环境变量所有者。</p><p>那么，为什么有两个呢？因为，windows是多任务，多用户系统，你可以创建多个不同的用户。</p><p>每个用户都有属于自己特定的环境变量。</p><p>那么这里呢，node.js安装的时候，默认是把node.js的环境变量放到系统环境变量里了。</p><p>path只是众多环境变量中的一个，也是环境变量里面，非常重要的一个变量。</p><p>那么，选择path环境变量之后，再点击【编辑】操作，弹出如图所示</p><p>蓝色高亮部分，就是我们刚才安装Node.js时的路径，这里很容易看出了。</p><p>可以看到，我们打印的10.15.3版本的Node.js路径，也赫然在列！</p><p>所以，问题应该明了了。</p><p>10.15.3版本的路径位于10.16.2路径的前面，所以，打印的就是10.15.3版本的Node.js</p><p>那么呢，我们把10.15.3版本删除，再重新打开cmd命令窗口。</p><p>同时呢，不光Node.js有版本，npm也有。</p><h2 id="node-js安装-解压包安装" tabindex="-1">Node.js安装 - 解压包安装 <a class="header-anchor" href="#node-js安装-解压包安装" aria-label="Permalink to &quot;Node.js安装 - 解压包安装&quot;">​</a></h2><p>选择，windows二进制安装包，因为站长的是64位系统，故选择64位版本。</p><p>点击它，会弹出下载弹框。</p><p>可以看到，这里的文件格式就变了，是zip压缩包格式。</p><p>Node.js的压缩包，压缩的是一个文件夹，所以解压后，会得到一个文件夹，并不会把里面的文件解压到当前目录。</p><p>然后呢，我们可以看到，跟我们前面用MSI格式安装的目录结构，是一样的。</p><p>那么，区别是什么呢？</p><p>答案就是：环境变量。</p><p>MSI安装的Node.js会自动设置环境变量，通过压缩包解压，并不会自动设置环境变量。</p><p>如何验证呢？</p><p>然后我们可以看到，在cmd命令行下输入node -v打印版本，就立马提示，Node.js 找不到了。</p><p>那么，我们现在来设置一下，让它自动去我们刚才解压的Node.js目录下找node.exe程序。</p><p>先复制我们的Node.js解压路径。</p><p>然后，给path变量，添加一个搜索路径值。</p><p>然后，一定要记得，点击左上角的【保存】图标！</p><p>再次重新打开cmd命令行窗口。</p><p>输入node -v，正确打印版本号。</p><p>输入where node，可以看到，执行的是我们方才设置的Node.js解压路径。</p><h2 id="node-js安装-配置参数" tabindex="-1">Node.js安装 - 配置参数 <a class="header-anchor" href="#node-js安装-配置参数" aria-label="Permalink to &quot;Node.js安装 - 配置参数&quot;">​</a></h2><p>那么，先下载一个业内比较出名的<a href="https://zhida.zhihu.com/search?content_id=105372846&amp;content_type=Article&amp;match_order=1&amp;q=express&amp;zhida_source=entity" target="_blank" rel="noreferrer">express</a>框架吧。</p><p>先建立一个测试目录，叫做node-test</p><p>然后进入note-test目录，执行npm init命令，初始化一下当前目录。</p><p>可以看到，当前目录下，只有使用了npm init命令后自动生成的一个package.json文件。</p><p>执行npm install --save expresss，表示把express安装到当前目录下。</p><p>安装完毕，显示如上图所示信息。</p><p>查看目录，显示多了一个node_modules目录和package-lock.js文件。</p><p>点开node_modules，可以看到，express已经安装完毕。</p><p>但是，同时，还有更多其他文件，这些是什么呢？</p><p>它们是express的依赖文件。</p><p>那么，npm模块的安装方式有多种，这里是把express安装到当前文件夹。</p><p>如果其他文件夹，也需要express，那就需要再安装一遍。N个文件夹，需要安装N遍。</p><p>有没有一劳永逸的方式呢？有，全局安装。</p><p>为了更明显地区分，我们先把刚才下载的文件，都删除掉。</p><p>然后，我们使用npm install --global express进行全局安装。</p><p>安装完毕如图。</p><p>回到我们的node-test目录，啥都没有。安装的express去哪了呢？</p><p>到了我们的Node.js解压目录下去了，和npm同级别的目录下。</p><p>没错，这就是全局安装。</p><p>可是，有时候，我们想改变全局安装的目录，放到自己指定的目录下，该怎么办呢？</p><p>输入npm config ls -ls命令，将会列出所有的配置参数。</p><p>往下拉，找到prefix属性。</p><p>看到没，prefix的值就是我们解压Node.js的目录路径。</p><p>现在知道为什么全局安装的npm包会保存到Node.js解压路径下了吗？</p><p>那么，如何修改呢？</p><p>执行命令npm config set prefix 全局路径</p><p>再执行一遍全局安装express包。</p><p>可以看到，目录下，自动生成了一个node_global目录</p><p>点开它。</p><p>哦，是一个node_modules目录</p><p>继续点开。</p><p>终于看到了express。</p><p>那么，由此可知，npm的所有配置参数，都可以使用这种方式去改变。</p><p>有时候，我们会发现，npm下载安装包的时候，速度异常缓慢！</p><p>这是为啥呢？继续查看默认配置。</p><p><img src="'+a+'" alt="image-20250313093250907"></p><p>这个网站在国外，所有下载速度会受限。</p><p>那么，怎么解决呢？</p><p>改成国内的npm仓库地址就行了。</p><p>哪个地址呢？</p><p>使用淘宝的npm镜像地址。</p><p>使用方式都写明了，这里呢，不推荐第一种。</p><p>第一种会下载cnpm这个模块，然后得把npm的使用方式改成cnpm命令。</p><p>没必要，我们只要把仓库地址，指向淘宝的npm镜像地址就行了。</p><p>如图，指明一下仓库地址。</p><p>然后呢，执行npm config ls命令，可以显示所有已经被修改过的参数（不包括默认的，加-ls是所有的参数）</p><p>可以看到，仓库地址并没有被修改，所以，这个方式，只适合临时性使用，每次都需要设置，比较麻烦。</p><p>找到了一个，全局配置文件。</p><p>地址是解压目录的etc目录下的npmrc文件。</p><p>etc目录没有？创建一个！</p><p>npmrc文件没有？创建一个！</p><p><strong>安装cnpm</strong></p><p>使用以下命令全局安装cnpm：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> npm install -g cnpm --registry=https://mirrors.cloud.tencent.com/npm/</span></span></code></pre></div><p><strong>淘宝 NPM 镜像</strong>：<code>https://registry.npmmirror.com/</code></p><p><strong>腾讯云 NPM 镜像</strong>：<code>https://mirrors.cloud.tencent.com/npm/</code></p><p><strong>华为云 NPM 镜像</strong>：<code>https://repo.huaweicloud.com/repository/npm/</code></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> npm install -g cnpm --registry=https://repo.huaweicloud.com/repository/npm/</span></span></code></pre></div><p>再次查看被修改过的配置。</p><p>可以看到，全局配置的参数已经生效了。</p><p>再次执行任何操作，都会从淘宝拉取模块。</p>',147)]))}const _=e(t,[["render",d]]);export{j as __pageData,_ as default};
