import{_ as e,c as o,o as p,ag as r}from"./chunks/framework.oP1PDRBo.js";const c=JSON.parse('{"title":"提示词优化原则","description":"","frontmatter":{"title":"提示词优化原则","date":"2025-03-14T00:00:00.000Z","tags":["提示词"],"categories":["学习笔记"]},"headers":[],"relativePath":"ollama/Prompt提示词优化原则.md","filePath":"ollama/Prompt提示词优化原则.md","lastUpdated":1744012294000}'),a={name:"ollama/Prompt提示词优化原则.md"};function l(n,t,s,i,_,g){return p(),o("div",null,t[0]||(t[0]=[r('<h2 id="提示词优化原则" tabindex="-1">提示词优化原则 <a class="header-anchor" href="#提示词优化原则" aria-label="Permalink to &quot;提示词优化原则&quot;">​</a></h2><p><strong>提示词（Prompt）</strong>：是一种注入式指令，用于“指挥”AI按照预设的思路去思考问题、输出内容。它是一种指令或信息，引导或触发AI系统做出回应。</p><p><strong>提示词工程（Prompt Engineering）</strong>：是一门较新的学科，关注提示词的开发和优化，帮助用户将大语言模型（LLM）用于各场景和研究领域。它不仅仅是关于设计和研发提示词，而是包含了与大语言模型交互和研发的各种技能和技术。</p><p><strong>一、基础优化原则</strong></p><ul><li>明确性与简洁性 直接陈述需求，减少冗余信息（如“解释气候变化的影响”而非“能不能告诉我一些关于气候变化的事情？”）</li><li>使用肯定指令（如“详细说明”代替“不要简略回答”），避免歧义 任务分解与逻辑引导</li><li>将复杂问题拆解为逐步子任务（如“先分析数据趋势，再预测未来结果”）</li><li>通过“逐步思考”“链式推理（CoT）”引导模型展示逻辑过程，提升答案准确性</li><li>上下文与知识增强</li><li>结合外部知识库（RAG技术）补充背景信息，减少模型“幻觉” 提供示例（Few-Shot）或领域术语，帮助模型理解特定场景</li></ul><p><strong>二、结构化提示设计</strong></p><p>CO-STAR框架 包含 上下文（Context）、目标（Objective）、风格（Style）、语气（Tone）、受众（Audience）、回复格式（Response），确保回答的针对性与专业性。</p><p>案例：为老年人设计吹风机广告时，需调整语言风格与受众需求</p><p>分隔符与格式化 用###、&lt;&lt;&lt;&gt;&gt;&gt;等符号分隔指令、示例与问题，增强模型对结构的理解</p><p>使用XML标签或标题明确不同模块（如“### 指令 ###”与“### 示例 ###”）</p><p>角色分配与风格控制 指定模型角色（如“历史学家”“营销专家”），调整回答的专业性与视角 通过“模仿戴森广告风格”等指令控制语言风格</p><p><strong>三、用户交互与反馈策略</strong></p><p>动态调整与迭代优化 根据模型初步回答反馈，调整提示词中的关键词或示例，逐步逼近理想结果 使用A/B测试对比不同提示版本的效果，选择最优方案 激励与惩罚机制 通过“最佳方案将获得奖励”激励模型深入思考</p><p>警示“未按要求执行将影响可信度”，强化指令遵循度 交互式细节补充 允许模型主动提问以澄清需求（如“需要哪些具体数据？”），提升回答精准度</p><p><strong>四、自动化工具与算法</strong></p><p>工具辅助优化 通过多步流程（计划→初稿→修订→终稿）自动化改进提示词，节省90%时间 表达压缩与权重控制 使用大写、加粗或重复关键词（如“重要”）强化关键信息权重 将长需求压缩为关键词（如“广告文案→年轻化+生活化+emoji”）</p>',16)]))}const d=e(a,[["render",l]]);export{c as __pageData,d as default};
